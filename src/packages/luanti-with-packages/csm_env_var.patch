diff --git a/builtin/settingtypes.txt b/builtin/settingtypes.txt
index e4bd8522f..0a2f85775 100644
--- a/builtin/settingtypes.txt
+++ b/builtin/settingtypes.txt
@@ -1882,7 +1882,7 @@ mgvalleys_np_dungeons (Dungeon noise) noise_params_3d 0.9, 0.5, (500, 500, 500),
 
 #    Enable Lua modding support on client.
 #    This support is experimental and API can change.
-enable_client_modding (Client modding) [client] bool false
+enable_client_modding (Client modding) [client] bool true
 
 #    Replaces the default main menu with a custom one.
 main_menu_script (Main menu script) [client] string
diff --git a/src/client/client.cpp b/src/client/client.cpp
index b1dfa5993..9a3723c8c 100644
--- a/src/client/client.cpp
+++ b/src/client/client.cpp
@@ -26,6 +26,7 @@
 #include "util/directiontables.h"
 #include "util/pointedthing.h"
 #include "util/serialize.h"
+#include "util/strfnd.h"
 #include "util/string.h"
 #include "util/srp.h"
 #include "filesys.h"
@@ -198,11 +199,25 @@ void Client::loadMods()
 		std::string path_user = porting::path_user + DIR_DELIM + "clientmods";
 		const auto modsPath = getClientModsLuaPath();
 		if (modsPath != path_user) {
-			paths["share"] = modsPath;
+			//paths["share"] = modsPath;
+		}
+		//paths["mods"] = path_user;
+
+		const char *env_csm_path = std::getenv("LUANTI_CSM_PATH");
+		Strfnd search_paths(env_csm_path ? env_csm_path : "");
+		while (!search_paths.at_end()) {
+			std::string path = search_paths.next(PATH_DELIM);
+			if (!path.empty())
+				paths["env" + std::to_string(paths.size())] = path;
 		}
-		paths["mods"] = path_user;
 
 		std::string settings_path = path_user + DIR_DELIM + "mods.conf";
+
+		const char *env_csm_conf = std::getenv("LUANTI_CSM_CONFIG");
+		if (env_csm_conf && *env_csm_conf)
+			settings_path = env_csm_conf;
+
+
 		modconf.addModsFromConfig(settings_path, paths);
 		modconf.checkConflictsAndDeps();
 	}
