{
  "author": "LMD",
  "content_warnings": [],
  "created_at": "2022-07-05T12:58:51.642638",
  "dev_state": null,
  "donate_url": null,
  "downloads": 520,
  "forum_url": "https://forum.luanti.org/viewtopic.php?t=28372",
  "forums": 28372,
  "game_support": [],
  "issue_tracker": "https://github.com/appgurueu/dbg/issues",
  "license": "MIT",
  "long_description": "# Debug (`dbg`)\n\nDebugging on steroids for Minetest mods\n\n## Motivation\n\nLua offers very powerful introspective facilities through its `debug` library, which unfortunately almost always go unused due to their clunky APIs.\n\nCurrent state-of-the-art in Minetest mod debugging appears to be print/log/chat \"debugging\" using serialization or `dump`,\nall of which should be rendered obsolete by `dbg`.\n\n## API\n\n**Optionally depend on `dbg` in `mod.conf` to ensure that it is available for load-time debugging.**\n\n### `dbg()`\n\nShorter alias for `dbg.dd()`.\n\n`debug.debug()` on steroids: Starts a REPL (read-eval-print-loop); equivalent to a breakpoint. Features include:\n\n* Full access to locals & upvalues of the calling function\n* Own local table `_L` where `local` debug vars get stored\n* Ability to enter expressions (rather than statements)\n* Continuation, which works the same as in the Lua REPL (+ empty lines working)\n* Pretty-printing using `dbg.pp`, including syntax highlighting\n\nEnter `cont` to exit without an error. Use `err` to throw after error debugging sessions (`dbg.error`, `dbg.assert`).\n\nUse EOF (<kbd>Ctrl + D</kbd> on Unix) to exit & shut down Minetest.\n\n### `dbg.error(message, [level])`\n\nStarts a debugging session at the given (optional) level, printing the error message.\n\n### `dbg.assert(value, [message])`\n\nReturns `value`. Starts an error debugging session if `value` is falsey. Error `message` is optional.\n\n### `dbg.pp(...)`\n\nPretty-prints the given vararg using the default parameters.\n\nIf the argument list of functions is unreliable (see `dbg.getargs_reliable` below),\na question mark (`?`) will be appended to the argument list to indicate this.\n\n### `dbg.ppp(params, ...)`\n\nParameterized pretty-print. Requires a custom pretty-printer parameter table `params`:\n\n* `write = function(str, token_type)`, where `token_type` is optional and may be one of `nil`, `boolean`, `number`, `string`, `reference`, `function` or `type`\n* `upvalues = true`, whether upvalues should be written\n\n### `dbg.vars(level)`\n\nReturns a virtual variable table of locals & upvalues `vars` for the given stacklevel that supports the following operations:\n\n* Getting: `vars.varname`\n* Setting: `vars.varname = value`\n* Looping: `for varname, value in vars() do ... end`\n\n### `dbg.locals(level)`\n\nReturns a virtual variable table of local values at the given stack level.\n\nLocals include upvalues.\n\n### `dbg.upvals(func)`\n\n`func` may be either a function or a stack level (including `nil`, which defaults to the stack level of the calling function).\n\nReturns a virtual variable table of upvalues at the given stack level.\n\n### `dbg.traceback(level)`\n\nFormats a stack trace starting at `level`. Similar to Lua's builtin `debug.stacktrace`, but shortens paths and accepts no `message` to prepend.\n\n### `dbg.stackinfo(level)`\n\nReturns a list of `info` by repeatedly calling `debug.getinfo` starting with `level` and working down the stack.\n\n### `dbg.getvararg(level)`\n\n**Only available on LuaJIT; on PUC Lua 5.1, `dbg.getvararg` will be `nil`.**\n\nReturns the vararg at the given stack level.\n\n### `dbg.getargs(func)`\n\n**Function parameter list detection doesn't work properly on PUC Lua 5.1; unused params are lost and varargs are turned into `arg`.**\nUse `dbg.getargs_reliable` (boolean) to check for reliability.\n\nReturns a table containing the argument names of `func` in string form\n(example: `{\"x\", \"y\", \"z\", \"...\"}` for `function(x, y, z, ...) end`).\n\n### `dbg.shorten_path(path)`\n\nShortens `path`: If path is a subpath of a mod, it will be shortened to `\"<modname>:<subpath>\"`.\n\n## Security\n\nDebug deliberately exposes the unrestricted `debug` API globally, as well as the `dbg` wrapper API,\nboth of which can be abused to exit the mod security sandbox.\n\n**Only use `dbg` in environments where you trust all enabled mods.**\n**Adding `dbg` to `secure.trusted_mods` (recommended) or disabling mod security (not recommended) is required.**\n\nThe `/lua` chatcommand must explicitly be enabled on servers by setting `secure.dbg.lua` to `true`;\nif enabled, server owners risk unprivileged users gaining access through MITM attacks.\n\n## Usage\n\n**Prerequisites:** LuaJIT and a terminal with decent ANSI support are highly recommended.\n\n### `/dbg`\n\nCalls `dbg()` to start debugging in the console.\n\n### `/lua <code>`\n\nExecutes the code and pretty-prints the result(s) to chat.\nOnly available in singleplayer for security reasons (risk of MITM attacks).\n\n---\n\nLinks: [GitHub](https://github.com/appgurueu/dbg), [ContentDB](https://content.minetest.net/packages/LMD/dbg), [Minetest Forums](https://forum.minetest.net/viewtopic.php?f=9&t=28372)\n\nLicense: Written by Lars MÃ¼ller and licensed under the MIT license (see `License.txt`).\n",
  "maintainers": ["LMD"],
  "media_license": "MIT",
  "name": "dbg",
  "provides": ["dbg"],
  "release": 17885,
  "repo": "https://github.com/appgurueu/dbg",
  "score": 157.8,
  "screenshots": ["https://content.luanti.org/uploads/85d618042c.png"],
  "short_description": "Debugging on steroids",
  "state": "APPROVED",
  "tags": ["developer_tools", "library"],
  "thumbnail": "https://content.luanti.org/thumbnails/1/85d618042c.png",
  "title": "Debug",
  "translation_url": null,
  "type": "mod",
  "url": "https://content.luanti.org/packages/LMD/dbg/releases/17885/download/",
  "video_thumbnail_url": null,
  "video_url": null,
  "website": null,
  "dependencies": {
    "LMD/dbg": []
  },
  "hash": "1hv8624kq1hjf44ilvcjb7928nh84yc8priy1b9vbmn3c6b0dr6p"
}
