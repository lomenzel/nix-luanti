{
  "author": "giga-turbo",
  "content_warnings": [],
  "created_at": "2021-06-22T17:53:50.391811",
  "dev_state": null,
  "donate_url": null,
  "downloads": 807,
  "forum_url": null,
  "forums": null,
  "game_support": [],
  "issue_tracker": "https://github.com/ISs25u/vector3/issues",
  "license": "GPL-3.0-only",
  "long_description": "vector3\n=========================\n**3D Vector library with meta functions**\n\n**License:** GPLv3   \n\n## Usage\n\n1. Make your mod depends on `vector3` ;\n2. Create vectors with `vector3(x, y, z)` ;\n3. See available methods below\n\nAll functions create __new vectors__ so that the original vector is not modified. All the functions return the new vector so that operations can be chained easily.\n\n*Example:*\n```lua\nu = vector3(1, 2, 3)\nv = vector3(4, 5, 6)\nw = (5 * u + u:dot(v) * u:cross(v:scale(5))):norm()\n```\n\n## Constructors\n\n#### vector3(x, y, z)\nCreates a new vector with components `x`, `y` and `z`. Components defaults to zero.\n\n```lua\nv0 = vector3() -- (0,0,0)\nv1 = vector3(1,2,3) -- (1,2,3)\n```\n\n#### vector3.fromSpherical(r, theta, phi)\nCreates a new vector from spherical coordinates. `theta` is the polar angle (from the upwards `y` axis), `phi` the azimut (counting clockwise around `y`, starting from `x`), and `r` the radius. Default values are `r=1`, `theta=pi/2`, `phi=0`.\n\n```lua\nv2 = vector3.fromSpherical(10, math.pi / 2, math.pi) -- (10, 0, 0)\n```\n\n#### vector3.fromCylindrical(r, phi, y)\nCreates a new vector from cylindrical coordinates. `r` is the radius, `phi` is the azimut angle (counting clockwise around `y`, starting from `x`) and `y` the height. Default values are `r=1`, `phi=0` and `y=1`.\n\n```lua\nv21 = vector3.fromCylindrical(10, math.pi / 2, 5) -- (0, 5, 10)\n```\n\n#### vector3.fromPolar(r, phi)\nCreates a new vector from polar coordinates. `r` is the radius and `phi` the angle (counting clockwise around `y`, starting from `x`), and . Default values are `r=1` and `phi=0`.\n\n```lua\nv22 = vector3.fromPolar(6, - math.pi / 2) -- (0, 0, -6)\n```\n\n#### vector3.srandom(a, b)\nCreates a vector with random spherical coordinates and with the radius drawn at random between `a` and `b`\n\n```lua\nv3 = vector3.srandom()\n```\n\n#### vector3.crandom(a, b, c, d)\nCreates a vector with random cylindrical coordinates. The radius is drawn at random between `a` and `b` and the height between `c` and `d`\n\n```lua\nv31 = vector3.crandom(0, 10, 5, 15)\n```\n\n#### vector3.prandom(a, b)\nCreates a vector with random polar coordinates and with the radius drawn at random between `a` and `b` \n\n```lua\nv32 = vector3.prandom()\n```\n\n## Constants\n\n```lua\nvector3.zero = vector3(0, 0, 0)\nvector3.one = vector3(1, 1, 1)\nvector3.none = -vector3(1, 1, 1)\nvector3.x = vector3(1, 0, 0)\nvector3.y = vector3(0, 1, 0)\nvector3.z = vector3(0, 0, 1)\nvector3.xy = vector3(1, 1, 0)\nvector3.yz = vector3(0, 1, 1)\nvector3.xz = vector3(1, 0, 1)\nvector3.nx = -vector3(1, 0, 0)\nvector3.ny = -vector3(0, 1, 0)\nvector3.nz = -vector3(0, 0, 1)\nvector3.nxy = -vector3(1, 1, 0)\nvector3.nyz = -vector3(0, 1, 1)\nvector3.nxz = -vector3(1, 0, 1)\n```\n\n## Meta functions\n\n#### print\nAllows to print a vector.\n\n```lua\nprint(v1)\n```\n\n#### concatenation\nAllows to create strings from vector concatenation.\n\n```lua\nprint(v1 .. v2 .. v3)\n```\n\n#### negative\nReturns the opposite vector.\n\n```lua\nv5 = -v1\n```\n\n#### equality\nReturn true if two vectors have their components equals\n\n```lua\nv1 == v2\n```\n\n#### addition\nReturn the sum of two vectors component wise. If one argument is a number then this number is added to each component of the vector.\n\n```lua\nv1 + v2\nv1 + 10\n```\n\n#### subtraction\nReturn the difference of two vectors component wise. If one argument is a number then this number is subtracted to each component of the vector.\n\n```lua\nv1 - v2\nv1 - 1\n```\n\n#### multiplication\nReturn the product of two vectors component wise. If one argument is a number then each component of the vector is multiplied by this number.\n\n```lua\nv1 * v2\nv1 * 10\n```\n\n#### division\nReturn the division of two vectors component wise. If one argument is a number then each component of the vector is divided by this number.\n\n```lua\nv1 / v3\nv1 / 10\n```\n\n## Functions\n\n#### clone()\nReturn a new vector which is a copy of the initial vector.\n\n```lua\nv4 = v1:clone()\n```\n\n#### length()\nReturns the magnitude of the vector.\n\n```lua\nv3:length()\n```\n\n#### norm()\nReturn the corresponding normalized vector (with magnitude one).\n\n```lua\nv3:norm()\n```\n\n#### scale(mag)\nReturn a new vector which is scaled to magnitude `mag`\n\n```lua\nv1:scale(10)\n```\n\n#### limit(max)\nReturns a new vector which is scaled to magnitude `max` if its magnitude if greater than `max`.\n\n```lua\nvector3(10, 20, 30):limit(5)\nvector3(1, 2, 3):limit(5)\n```\n\n#### floor()\nReturn a new vector with the components floored.\n\n```lua\nv3:floor()\n```\n\n#### round()\nReturn a new vector with the components rounded to the closest integer.\n\n```lua\nv3:round()\n```\n\n#### set(x, y, z)\nReturn a new vector with components `x`,`y` and `z`. If a parameter is nil then the corresponding component is unchanged.\n\n```lua\nv1:set(4, nil, 7)\n```\n\n#### offset(a, b, c)\nReturn a new vector with components `x`, `y`, `z` offset by `a`, `b` and `c`. If a parameter is nil the corresponding component is unchanged.\n\n```lua\nv2:offset(-1, 3, 2)\n```\n\n#### apply(f)\nReturn a new vector with the function `f` applied to its components.\n\n```lua\nv2:apply(function(x) return x * x end)\n```\n\n#### dist(b)\nReturns the distance between the current vector and `b` (as if they were representing points).\n\n```lua\nv1:dist(v2)\n```\n\n#### dot(b)\nReturns the dot product of the current vector and `b`.\n\n```lua\nv1:dot(v2)\n```\n\n#### cross(b)\nReturns a vector which is the cross product of the current vector and `b`.\n\n```lua\nv1:cross(v2)\n```\n\n#### rotate_around(axis, angle)\nReturns a new vector which is the current vector rotated around `axis` with `angle`.\n\n```lua\naxis = vector3(0, 1, 0)\nv2:rotate_around(axis, math.pi)\n```\n\n#### unpack()\nReturns the unpacked components of the current vector.\n\n```lua\nx, y, z = v1:unpack()\nprint(x)\nprint(y)\nprint(z)\n```",
  "maintainers": ["giga-turbo"],
  "media_license": "GPL-3.0-only",
  "name": "vector3",
  "provides": ["vector3"],
  "release": 12613,
  "repo": "https://github.com/gigaturbo/vector3",
  "score": 1.7,
  "screenshots": ["https://content.luanti.org/uploads/7e6cd160e9.png"],
  "short_description": "3D Vector class with meta functions",
  "state": "APPROVED",
  "tags": ["world_tools"],
  "thumbnail": "https://content.luanti.org/thumbnails/1/7e6cd160e9.png",
  "title": "Vector3",
  "translation_url": null,
  "type": "mod",
  "url": "https://content.luanti.org/packages/giga-turbo/vector3/releases/12613/download/",
  "video_thumbnail_url": null,
  "video_url": null,
  "website": null,
  "dependencies": {
    "giga-turbo/vector3": []
  },
  "hash": "1ygmmgfl1kj0viam1vv6d6simv9km0dhdji4sfqda6kj9ywfiq2n"
}
