{
  "author": "Emojiminetest",
  "content_warnings": [],
  "created_at": "2023-06-07T10:40:12.831181",
  "dev_state": "ACTIVELY_DEVELOPED",
  "donate_url": null,
  "downloads": 310,
  "forum_url": null,
  "forums": null,
  "game_support": [],
  "issue_tracker": "https://github.com/C-C-Minetest-Server/player_settings/issues",
  "license": "MIT",
  "long_description": "# Player Settings\n\nAllow every players to have their own settings screen and tweak their own settings. Type `/settings` to open the settings GUI.\n\n## Settings in `minetest.conf`\n\n* `player_settings_register_example` (bool): Register example settings\n  * Default: `false`\n  * If enabled, register setting examples.\n  * This is always set to true in singleplayer mode regardless of the settings.\n\n## API\n\n### Register Settings\n\n* `player_settings.register_metacategory(name, def)`: Register a settings meta category\n  * `name`: The ID of the meta category\n  * `def`: a [meta category definition table](#metacategories)\n* `player_settings.register_category(name, def)`: Register a settings category\n  * `name`: The ID of the category\n  * `def`: a [category definition table](#categories)\n* `player_settings.register_setting(name, def)`: Register a setting\n  * `name`: The ID of the setting\n  * `def`: a [setting definition table](#settings)\n* `player_settings.unregister_metacategory(name)`: Unregister a metacategory by its name\n* `player_settings.unregister_category(name)`: Unregister a category by its name\n* `player_settings.unregister_setting(name)`: Unregister a setting by its name\n\n### Interact with Settings\n\n* `player_settings.register_on_settings_set(name,key,old_value,new_value)`: Register callacks on settings set\n  * `name`: Name of a player\n  * `key`: The ID of the setting\n  * `old_value`: The value being replaced\n  * `new_value`: The current setting value\n  * *Not recommended.* To monitor individual settings, set `after_change` in the [setting definition table](#settings).\n* `player_settings.set_setting(name,key,value)`: Set the value of a setting for a player\n  * `name`: Name or [`ObjectRef`][ObjectRef] of a player\n  * `key`: The ID of the setting\n  * `value`: The value to be set to the setting\n  * Return boolean indicating success\n    * `after_change` and `player_settings.register_on_settings_set` callbacks are called\n  * If failed, the second returned value may be one of the following:\n    * `PLAYER_NOT_EXIST`: The player's auth data does not exist\n    * `KEY_NOT_EXIST`: The setting does not exist\n    * `TYPE_CONVERT_FAILED`: The given value cannot be converted to the type specified in the setting definition\n    * `NUMBER_TOO_SMALL` and `NUMBER_TOO_LARGE` (number only): The given value is below or higher than the required range set in the setting definition\n    * `SETTING_ENUM_TYPE_INVALID` (enum only): The type of enum values set in the settings is invalid\n    * `SETTING_VALUE_NOT_IN_ENUM` (enum only): The given value is not in the list of allowed options set in the setting definition\n    * `SETTING_TYPE_INVALID`: The type of the setting specified in the definition is invalid\n* `player_settings.set_default(name,key)`: Set the value of a settings back to its default for a player\n  * `name`: Name or [`ObjectRef`][ObjectRef] of a player\n  * `key`: The ID of the setting\n  * Return boolean indicating success\n    * `after_change` and `player_settings.register_on_settings_set` callbacks are called\n  * If failed, the second returned value may be one of the following:\n    * `PLAYER_NOT_EXIST`: The player's auth data does not exist\n    * `KEY_NOT_EXIST`: The setting does not exist\n* `player_settings.get_setting(name,key)`: Get the value of a setting from a player\n  * `name`: Name or [`ObjectRef`][ObjectRef] of a player\n  * `key`: The ID of the setting\n  * Return boolean indicating success\n  * If success, the second returned value is the setting value\n  * If failed, the second returned value may be one of the following:\n    * `PLAYER_NOT_EXIST`: The player's auth data does not exist\n    * `KEY_NOT_EXIST`: The setting does not exist\n\n#### Internal\n\nThese functions are for internal uses. Avoid using them in your code.\n\n* `player_settings.get_settings_path(name)`: Get the file path of the setting file of a player\n  * `name`: Name of the player\n* `player_settings.get_settings(name)`: Get the table of settings of a player\n  * `name`: Name or [`ObjectRef`][ObjectRef] of a player\n* `player_settings.write_settings(name,tb)`: Write a setting table to  the setting file of a player\n  * `name`: Name or [`ObjectRef`][ObjectRef] of a player\n  * `tb`: Key-value pair of player settings\n* `player_settings.erase_settings(name)`: Erase all the settings of a player\n  * **WARNING: This is irreversable!**\n  * `name`: Name or [`ObjectRef`][ObjectRef] of a player\n* `player_settings.save_all_settings()`: Save all in-cache changes to settings\n\n### Constants\n\nThese are the read-only variables.\n\n* `player_settings.registered_metacategories`: All registered metacategories\n  * Key: The ID of the metacategory\n  * Value: The [meta category definition table](#metacategories)\n* `player_settings.registered_categories`: All registered categories\n  * Key: The ID of the category\n  * Value: The [category definition table](#categories)\n* `player_settings.registered_settings`: All registered settings\n  * Key: The ID of the setting\n  * Value: The [setting definition table](#settings)\n* `player_settings.gui`: A [flow](https://gitlab.com/luk3yx/minetest-flow/) GUI object\n  * Refer to [the `README.md` of flow mod](https://gitlab.com/luk3yx/minetest-flow/-/blob/main/README.md) for further documentations\n\n## Definition tables\n\n### Metacategories\n\nUsed by `player_settings.register_metacategory`.\n\n```lua\n{\n    title = \"\",\n    -- Display title of the metacategory.\n\n    allow_show = function(player) return true end,\n    -- Determine if the metacategory should be shown to the player.\n    -- If returned false, all its child will be hidden.\n}\n```\n\n### Categories\n\nUsed by `player_settings.register_category`.\n\n```lua\n{\n    title = \"\",\n    -- Display title of the category.\n\n    metacategory = \"general\",\n    -- The ID of the metacategory.\n\n    allow_show = function(player) return true end,\n    -- Determine if the category should be shown to the player.\n    -- If returned false, all its child will be hidden.\n}\n```\n\n### Settings\n\nUsed by `player_settings.register_setting`.\n\n```lua\n{\n    description = \"\",\n    -- Short description of the setting. It should be as short and as simple as possible.\n\n    long_description = \"\"\n    -- Long description of the setting.\n\n    type = \"int\" / \"string\" / \"bool\" / \"float\" / \"enum\",\n    -- Type of the setting.\n\n    default = \"\",\n    -- Default value of the setting.\n\n    number_min = math.min,\n    number_max = math.huge,\n    -- Only applies when type == \"int\" / \"float\".\n    -- The lowest and the highest value of the setting.\n\n    enum_type = \"int\" / \"string\" / \"float\",\n    -- Only applies when type == \"enum\".\n    -- The type of the choices.\n\n    enum_choices = [\"1\", \"2\", ...]\n    -- Only applies when type == \"enum\".\n    -- All the avaliable choices.\n\n    display_type = \"string\" / \"enum\" / \"bool\",\n    -- How the setting is displayed in the GUI.\n    -- string: For all data types (default of int, float and string)\n    -- enum: for enum only\n    -- bool: for bool only\n\n    validator = function(name, key, value) end,\n    -- Validates the input before it is being stored.\n    -- `name` is the player's name.\n    -- `key` is the ID of the setting.\n    -- `value` is the value of the setting to be modified.\n    -- Should return either `true` or a error message.\n\n    after_change = function(name, key, old_value, new_value) end,\n    -- Function triggered after a player had successfully modified one setting.\n    -- `name` is the player's name.\n    -- `key` is the ID of the setting.\n    -- `old_value` is the value of the setting before modifications.\n    -- `new_value` is the value of the setting after modifications.\n\n    category = \"general\",\n    -- The ID of the category.\n\n    allow_show = function(name) return true end,\n    -- Determine if the setting should be shown to the player.\n    -- If returned false, it will be hidden.\n}\n```\n\n[ObjectRef]: https://github.com/minetest/minetest/blob/master/doc/lua_api.md#objectref\n",
  "maintainers": ["Emojiminetest"],
  "media_license": "CC-BY-SA-4.0",
  "name": "player_settings",
  "provides": ["player_settings"],
  "release": 19093,
  "repo": "https://github.com/C-C-Minetest-Server/player_settings",
  "score": 3,
  "screenshots": ["https://content.luanti.org/uploads/d68e71e3f6.png"],
  "short_description": "Player-specific settings",
  "state": "APPROVED",
  "tags": ["gui", "library", "multiplayer"],
  "thumbnail": "https://content.luanti.org/thumbnails/1/d68e71e3f6.png",
  "title": "Player Settings",
  "translation_url": null,
  "type": "mod",
  "url": "https://content.luanti.org/packages/Emojiminetest/player_settings/releases/19093/download/",
  "video_thumbnail_url": null,
  "video_url": null,
  "website": null,
  "dependencies": {
    "Emojiminetest/player_settings": [
      {
        "is_optional": false,
        "name": "flow",
        "packages": ["Kimapr/nonsensical_skyblock", "luk3yx/flow"]
      }
    ],
    "luk3yx/flow": [
      {
        "is_optional": false,
        "name": "formspec_ast",
        "packages": [
          "luk3yx/prang",
          "RedundantC/wis_part1",
          "luk3yx/formspec_ast",
          "Kimapr/nonsensical_skyblock",
          "Thunder1035/pacman"
        ]
      }
    ]
  },
  "hash": "1ay9xzvcwj1pxd7a7sf6788ks6mqx3bb2mzqmi9vsz6y2qc6nwmw"
}
