{
  "author": "rubenwardy",
  "content_warnings": [],
  "created_at": "2018-05-24T22:11:02.461891",
  "dev_state": "AS_IS",
  "donate_url": "https://rubenwardy.com/donate/",
  "downloads": 6793,
  "forum_url": "https://forum.luanti.org/viewtopic.php?t=14899",
  "forums": 14899,
  "game_support": [],
  "issue_tracker": "https://github.com/rubenwardy/ChatCmdBuilder/issues/",
  "license": "MIT",
  "long_description": "# API\n\n## Installing\n\nAs a mod developer, you can:\n\n1. Depend on [lib_chatcmdbuilder](https://content.minetest.net/packages/rubenwardy/lib_chatcmdbuilder/)\n   mod and let the Minetest dependency system install it for you.\n\n2. OR include the `chatcmdbuilder.lua` file in your mod, and then `dofile` it like so:\n\n   ```lua\n   local chatcmdbuilder = dofile(\"chatcmdbuilder.lua\")\n   ```\n\n   It's important that you keep this as a local, to avoid conflict with the\n   mod version if installed.\n\n\n## Registering Chat Commands\n\n`chatcmdbuilder.register(name, def)` registers a new chat command called `name`. It returns an object to register subcommands.\n\nHere is an example:\n\n```lua\nlocal cmd = chatcmdbuilder.register(\"admin\", {\n\tdescription = \"Admin tools\",\n\tprivs = {\n\t\tkick = true,\n\t\tban = true\n\t}\n})\n\ncmd:sub(\"kill :target\", function(name, target)\n\tlocal player = minetest.get_player_by_name(target)\n\tif player then\n\t\tplayer:set_hp(0)\n\t\treturn true, \"Killed \" .. target\n\telse\n\t\treturn false, \"Unable to find \" .. target\n\tend\nend)\n\ncmd:sub(\"move :target to :pos:pos\", {\n\tprivs = {\n\t\tteleport = true\n\t}\n\n\tfunc = function(name, target, pos)\n\t\tlocal player = minetest.get_player_by_name(target)\n\t\tif player then\n\t\t\tplayer:setpos(pos)\n\t\t\treturn true, \"Moved \" .. target .. \" to \" .. minetest.pos_to_string(pos)\n\t\telse\n\t\t\treturn false, \"Unable to find \" .. target\n\t\tend\n\tend,\n})\n```\n\nA player could then do `/admin kill player1` to kill player1,\nor `/admin move player1 to 0,0,0` to teleport a user.\n\n## Introduction to Routing\n\nA route is a string. Let's look at `move :target to :pos:pos`:\n\n* `move` and `to` are terminals. They need to be there in order to match.\n* `:target` and `:pos:pos` are variables. They're passed to the function.\n* The second `pos` in `:pos:pos` after `:` is the param type. `:target` has an implicit\n  type of `word`.\n\n### Param Types\n\n* `word`: default. Any string without spaces\n* `number`: Any number, including decimals\n* `int`: Any integer, no decimals\n* `text`: Any string\n* `pos`: 1,2,3 or 1.1,2,3.4567 or (1,2,3) or 1.2, 2 ,3.2\n* `modname`: a mod name\n* `alpha`: upper or lower alphabetic characters (A-Za-z)\n* `alphascore`: above, but with underscores\n* `alphanumeric`: upper or lower alphabetic characters and numbers (A-Za-z0-9)\n* `username`: a username\n* `itemname`: an item name\n\n### Registering new Param Types\n\n```lua\n-- Simple type for lowercase text\n--    eg: `:param:lower`\nchatcmdbuilder.register_type(\"lower\", \"([a-z]+)\", function(pop)\n\treturn tonumber(pop())\nend)\n\n-- Position type\n--    eg: `:param:pos`\nchatcmdbuilder.register_type(\"pos\", \"%(? *(%-?[%d.]+) *, *(%-?[%d.]+) *, *(%-?[%d.]+) *%)?\", function(pop)\n\treturn {\n\t\tx = tonumber(pop()),\n\t\ty = tonumber(pop()),\n\t\tz = tonumber(pop())\n\t}\nend)\n```\n\n## Reference\n\n### Functions\n\n* `chatcmdbuilder.register(name, def)`: registers a chat command\n\t* Returns a `chatcmdbuilder.Builder` instance\n\t* `name`: chat command name.\n\t* `def`: chat command def, can contain everything in `register_chatcommand`, except for `func`.\n* `chatcmdbuilder.register_type(name, pattern, converter)`: register a param type\n\t* `name`: type name, used in routes\n\t* `pattern`: A Lua pattern\n\t* `converter(pop)`: Optional, a function to convert text into the type\n\t\t* `pop`: function to return the next matched group.\n\t\t* returns the converted value.\n\n### class chatcmdbuilder.Builder\n\nThis is the class returned by `chatcmdbuilder.register`.\n\nConstructor:\n\n* `chatcmdbuilder.Builder:new()`: returns new instance\n\nMethods:\n\n* `sub(path, func_or_def)`\n\t* `path`: a route\n\t* `func_or_def`: either a function or a def table containing:\n\t\t* `func`: function\n\t\t* `privs`: a list of required privs\n* `run(name, params)`: Execute chat command\n\t* Returns same as `func`: `boolean, message`.\n\t* Doesn't check chat command privs, but will check subcommand privs.\n",
  "maintainers": [
    "rubenwardy"
  ],
  "media_license": "MIT",
  "name": "lib_chatcmdbuilder",
  "provides": [
    "lib_chatcmdbuilder"
  ],
  "release": 10727,
  "repo": "https://github.com/rubenwardy/ChatCmdBuilder",
  "score": 705.6,
  "screenshots": [
    "https://content.luanti.org/uploads/1a1f451d6f.png"
  ],
  "short_description": "A library to make registering chat commands easier",
  "state": "APPROVED",
  "tags": [
    "library"
  ],
  "thumbnail": "https://content.luanti.org/thumbnails/1/1a1f451d6f.png",
  "title": "Chat Command Builder",
  "translation_url": null,
  "type": "mod",
  "url": "https://content.luanti.org/packages/rubenwardy/lib_chatcmdbuilder/releases/10727/download/",
  "video_thumbnail_url": null,
  "video_url": null,
  "website": null,
  "dependencies": {
    "rubenwardy/lib_chatcmdbuilder": []
  },
  "hash": "19fvq40rqspfh8q2psl8dh4x9zvffydw4ar086g5dwn1k2fib0vr"
}
