{
  "author": "-SX-",
  "content_warnings": [],
  "created_at": "2021-02-26T20:13:38.235086",
  "dev_state": "MAINTENANCE_ONLY",
  "donate_url": null,
  "downloads": 763,
  "forum_url": null,
  "forums": null,
  "game_support": [],
  "issue_tracker": "https://github.com/S-S-X/qos/issues",
  "license": "MIT",
  "long_description": "## Minetest HTTP API QoS control queue\n\n### Usage:\n\nFunction `QoS` returns HTTP API wrapped within simple request priority manager.\n`HttpAPI QoS(http_api, default_priority = 3)`\n\nSimply wrap `minetest.request_http_api` with `QoS` and you're good to go.\n\n```lua\nlocal http = minetest.request_http_api()\n\nhttp = QoS and QoS(http, 2) or http\n```\n\nor alternative if you like:\n```lua\nlocal http = QoS and QoS(minetest.request_http_api(), 2) or minetest.request_http_api()\n```\n\n### Priorities\n\nQoS comes with 3 priority levels without interesting names, priority levels are 1, 2 and 3.\n\nLowest number is highest priority and priority 1 requests can cause queue to get clogged.\n\nPriorities 2 and 3 will always leave empty space for priority 1 requests and cannot completely fill queues ever.\n\nQueued requests will be processed in first in, first out order but in a way that queued highest priority requests\nwill be handled first and lower priorities only if there's still free slots for parallel processing.\n\n### Configuration\n\nConfiguration key value pairs goes to main `minetest.cfg`. Default values listed below.\n\nCode for solving dynamic default values is shown between `<` and `>`.\nChanging these values makes them static.\n\nImportant Minetest engine configuration keys:\n\n* **`curl_parallel_limit = 8`**\n  How many http requests can be parallelized by engine.\n  It is recommended to increase this a bit when using qos mod.\n\nQoS configuration keys:\n\n* **`qos.info_priv = basic_privs`**\n* **`qos.admin_priv = basic_privs`**\n* **`qos.register_chatcommands = true`**\n* **`qos.enforce_timeouts = false`**\n* **`qos.queue_size.1 = <curl_parallel_limit * 16>`**\n* **`qos.queue_size.2 = <curl_parallel_limit * 12>`**\n* **`qos.queue_size.3 = <curl_parallel_limit * 8>`**\n* **`qos.max_timeout.1 = 5`**\n* **`qos.max_timeout.2 = 4`**\n* **`qos.max_timeout.3 = 3`**\n* **`qos.limits.1 = curl_parallel_limit * 4`**\n  Limit queue utilization to 400%, this forces to overcommit requests to engine queue.\n  Engine queues are not very efficient as of Minetest 5.4, for very large queues it is recommended to keep this smaller.\n* **`qos.limits.2 = <math.floor(curl_parallel_limit * 0.8)>`**\n  Limit queue utilization to 80% by default. Attempts to always leave at least 20% reserved for priority 1 requests.\n* **`qos.limits.3 = <math.floor(curl_parallel_limit * 0.5)>`**\n  Limit queue utilization to 50% by default. Attempts to always leaves at least 50% reserved for priority 2 and 1.\n\n### Extras\n\n#### Minetest HTTP API\n\nQoS provides `priority_override` as last argument for HTTP API functions, this can be used to override default priority.\n\n* **`http.fetch(req, callback, priority_override)`**\n  If no `priority_override` provided then one given to `QoS(http_api, priority)` initialization function is used.\n* **`http.fetch_async(req, priority_override)`**\n  If no `priority_override` provided then one given to `QoS(http_api, priority)` initialization function is used.\n\n#### Monitoring functions:\n\n* **`QoS.queue_length(priority)`**\n  Return total number of queued requests by priority. If priority not given then return sum of all priorities.\n* **`QoS.active_requests()`**\n  Return total number of active executed but not yet finished requests.\n* **`QoS.active_utilization()`**\n  Return % utilization of engine request queue.\n* **`QoS.queue_size(priority)`**\n  Return size of QoS request queue.\n* **`QoS.utilization(priority)`**\n  Return % utilization of queue by priority. If priority not given then aggregate utilization of all queues is returned.\n\n#### Queue control API\n\n* **`QoS.data.queues[<priority>]`**\n  Direct access to queues, see `Queue`.\n* **`QoS.data.dropped[<priority>]`**\n  Dropped request counter. Behavior is about to change, currently ever increasing counters for dropped requests.\n\n#### Queue objects accessible through QoS.data.queues\n\n* **`Queue:push(value)`**\n  Push variable to queue, normally should not be used externally.\n* **`Queue:pop()`**\n  Remove and return variable from queue, normally should not be used externally.\n* **`Queue:clear()`**\n  Clear all values from queue, does not return values.\n\n#### Chat commands\n\n* **`/qos:queue_length [<priority>]`**\n  Return current QoS queue length.\n* **`/qos:active_requests`**\n  Return number of active requests executed with QoS controller.\n* **`/qos:active_utilization`**\n  Return current QoS active requests utilization  percentage value.\n* **`/qos:utilization [<priority>]`**\n  Return current QoS queue utilization percentage value.\n* **`/qos:clear <priority>|all`**\n  Clears selected or all queues. All queued requests are gone for good.\n\n### Performance\n\nMost of it seems to work and did not so far find anything that does not work.\n\nEither near zero overhead or outright better performance when mod is enabled:\nFast enough, under heavy load compared to pushing a lot of stuff to MT 5.4 and 5.5 internal engine queues QoS works about 12x faster.\n\nAlso, while not really significant, HTTP API http.fetch for single request is faster depending on situation (removing timeout enforcement will make it faster for every situation).\n\nBasically that means you can have better control over requests without losing any performance, possibly even gaining performance if you're heavy Minetest HTTP API user.\n\n`http.fetch(req, callback, priority_override)` is what has been used for performance testing.\n`http.fetch_async(req, priority_override)` performance not tested but is most probably slightly worse than default.",
  "maintainers": [
    "-SX-"
  ],
  "media_license": "MIT",
  "name": "qos",
  "provides": [
    "qos"
  ],
  "release": 29362,
  "repo": "https://github.com/S-S-X/qos.git",
  "score": 2.4,
  "screenshots": [],
  "short_description": "Improve quality of important HTTP requests by grouping requests into service quality buckets.",
  "state": "APPROVED",
  "tags": [
    "library",
    "server_tools"
  ],
  "thumbnail": null,
  "title": "Minetest HTTP API QoS control queue",
  "translation_url": null,
  "type": "mod",
  "url": "https://content.luanti.org/packages/-SX-/qos/releases/29362/download/",
  "video_thumbnail_url": null,
  "video_url": null,
  "website": null,
  "dependencies": {
    "-SX-/qos": []
  },
  "hash": "1zclww1w96pzlr0li38k0mvpvphizbd5hjbd94gkp912pyvc7izr"
}
