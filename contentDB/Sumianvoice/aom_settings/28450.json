{
  "author": "Sumianvoice",
  "content_warnings": [],
  "created_at": "2024-06-26T02:34:37.149251",
  "dev_state": "ACTIVELY_DEVELOPED",
  "donate_url": null,
  "downloads": 147,
  "forum_url": null,
  "forums": null,
  "game_support": [],
  "issue_tracker": null,
  "license": "0BSD",
  "long_description": "# aom_settings\nMirror of `aom_settings` from Age of Mending (AoM). This allows for world-level or player-level settings, and can be hooked into via `aom_ingame_menu` to give a GUI for changing your player or server settings. **This does provide a GUI for modifying settings**, but it is not accessible except by commands by default. These commands also are not accessible except to `server` privileges by default, but can be set so anyone can use the player settings menu. Use `/settings server` to access the server settings to change this. The normal way to integrate this into your game or mod is to provide a compatibiliy hook into this api from whatever formspec you desire. That can be done by using the functions listed below.\n\n## Getting setting values\nWhen getting a setting, use `aom_settings.get_setting(player, settingname, default)`. You can optionally specify a default, in which case if the setting doesn't exist and isn't set, this will be returned instead.\n\nThis allows you to have player based settings, which can be configurable ingame via formspecs (see: `aom_ingame_menu`).\n```lua\nlocal function play_music(player, track)\n    local volume = 1\n    if minetest.get_modpath(\"aom_settings\") then\n        volume = aom_settings.get_setting(player, \"music_volume\", 1)\n    end\n    if volume <= 0 then return end\n    minetest.sound_play(track, {\n        gain = volume,\n        to_player = player:get_player_name(),\n    })\nend\n```\n\n## Register new settings\nTo register a setting, use `aom_settings.register_setting(settingname, default, non_technical_name)`. Settings are grouped by the first word, separated by `_` so; `item_pickup_distance` will be in the category `item` and `gameplay_node_drop_item` will be in the category `gameplay`.\n```lua\naom_settings.register_setting(\"item_pickup_distance\", false, \"Item pickup distance\")\n```\nSetting a setting that **doesn't exist** will **do nothing and have no effect**; settings must be registered first. You may overwrite existing settings by registering them again.\n\n\n## Server level settings\nYou can also set server level settings, and they are accessed in exactly the same way, except `nil` is passed for the player since it isn't needed. Passing `nil` as the player will force the setting to be set, otherwise if a player or a string is given, it will check auth with `minetest.check_player_privs(player, \"server\")`.\n```lua\naom_settings.register_setting(\"debug_enabled\", 3, \"Debug enabled\", \"server\")\nlocal debug = aom_settings.get_setting(nil, \"debug_enabled\", false)\n```\n\n**VERY IMPORTANT**: if making own setting GUI, it is important that some non-falsy value like `player or \"nothing\"` is given or else it is theoretically possible for a bad actor to set server settings by sending form fields. Similarly, sending a sha1 or some random value in the GUI formspec and checking for this as a second factor when submitting changes to settings is advisable for the same reason. See `aom_ingame_menu` for an example of this.\n\n\n## Callbacks\nThese will be called when the setting changes value.\n\nThis can help if you need to change a local value or update something when a setting is changed; for example if music is playing, it might be helpful to fade the volume of the music to match the new value. Note that `old_value` can be nil if the setting was not set yet at the time, and so can `player` in the case of server settings. If a setting has been set to `nil`, `new_value` will be the default value rather than `nil`.\n```lua\naom_settings.register_on_change_setting(settingname, function(player, settingname, new_value, old_value) end)\naom_settings.register_on_change_any_setting(function(player, settingname, new_value, old_value) end)\n```\n\n## Formspec\n\nTo show a settings page to a player, use the following. You need to provide a player object, *not* a name.\n```lua\naom_settings.form.show_page(player, pagename)\n-- pagename can be \"player\" or \"server\"\n```\n\nMore pages can be registered as well. Like \"server\", these are seperate pages for settings. If you register settings in a completely different page, this is how you access those. This is not meant to be like tabs though you could use it that way. This requires providing a page header table, with `title` and `desc` fields.\n```lua\nlocal page_header = {\n    title = \"MY SETTINGS PAGE\",\n    desc = \"These settings are special.\",\n}\naom_settings.form.register_page_process(\"my_page_name\", function(fs, player, pagename, data)\n    aom_settings.form.get_settings_page(fs, player, pagename, page_header)\nend)\n```",
  "maintainers": ["Sumianvoice"],
  "media_license": "0BSD",
  "name": "aom_settings",
  "provides": ["aom_settings"],
  "release": 28450,
  "repo": "https://codeberg.org/SumianVoice/aom_settings",
  "score": 2,
  "screenshots": ["https://content.luanti.org/uploads/21886d9689.jpg"],
  "short_description": "Provides methods for both player level and server level settings",
  "state": "APPROVED",
  "tags": ["library"],
  "thumbnail": "https://content.luanti.org/thumbnails/1/21886d9689.png",
  "title": "AoM Settings",
  "translation_url": null,
  "type": "mod",
  "url": "https://content.luanti.org/packages/Sumianvoice/aom_settings/releases/28450/download/",
  "video_thumbnail_url": null,
  "video_url": null,
  "website": null,
  "dependencies": {
    "Sumianvoice/aom_settings": []
  },
  "hash": "13jcnl3gh0j7fhwinmynb0w5g2pwb4cp62z24lfw89cnd20wpw11"
}
