{
  "author": "luk3yx",
  "content_warnings": [],
  "created_at": "2021-03-10T08:00:24.568934",
  "dev_state": "MAINTENANCE_ONLY",
  "donate_url": null,
  "downloads": 1161,
  "forum_url": null,
  "forums": null,
  "game_support": [],
  "issue_tracker": "https://github.com/mt-historical/snippets/issues",
  "license": "MIT",
  "long_description": "A way for admins to run and save lua snippets.\n\n## Chatcommands\n\n - `/snippets`: Open the snippets console. This allows you to edit and run Lua\n   snippets.\n\n## Nodes\n\nThis mod registers a snippets button node that runs a snippet when pressed. The\nsnippet will be called with the player name as its first argument. For example,\nyou can do `local name = ...` inside a snippet to get the name of the player\nthat pressed the button.\n\nButtons don't appear in the creative inventory, if you want them to you will\nneed to run `/giveme snippets:button`.\n\nIf you don't want the buttons at all, you can add\n`snippets.enable_buttons = false` to your minetest.conf.\n\n## API\n\n - `snippets.register_snippet(name, <code or def>)`: Registers a snippet.\n    `def` can be a table containing `code` (or `func`), and optionally `owner`.\n    If `persistent` is specified, this snippet will remain registered across\n    reboots.\n - `snippets.unregister_snippet(name)`: The opposite of\n    `snippets.register_snippet`.\n - `snippets.registered_snippets`: A table containing the above snippets.\n - `snippets.log(level, msg)`: For use inside snippets: Logs a message. `level`\n    can be `none`, `debug`, `info`, `warning`, or `error`.\n - `snippets.register_on_log(function(snippet, level, msg))`: Run when\n    snippets.log is called. `snippet` is the name of the snippet. Newest\n    functions are called first. If a callback returns `true`, any remaining\n    functions are not called (including the built-in log function). Callbacks\n    can check what player (if any) owns a snippet with\n    `snippets.registered_snippets[snippet].owner`.\n - `snippets.log_levels`: A table containing functions that run\n    `minetest.colorize` on log levels (if applicable).\n    Example: `snippets.log_levels.error('Hello')` â†’\n    `minetest.colorize('red', 'Hello')`\n - `snippets.exec_as_player(player_or_name, code)`: Executes `code` (a string)\n    inside an \"anonymous snippet\" owned by the player.\n - `snippets.exec(code)`: Executes `code` inside a generic snippet.\n - `snippets.run(name, ...)`: Executes a snippet.\n - `snippets.Form(player_or_name)`: Creates a form.\n - `snippets.close_form(player_or_name)`: Closes `player_or_name`'s currently\n    open form.\n\n### Forms\n\n`snippets.Form`s can display and handle formspecs, and are recommended inside\nsnippets over `minetest.show_formspec`, as they do not create semi-permanent\nglobal handlers. There is currently no way to set the `formname`, it is\nautomatically chosen/generated and is used internally.\n\nConsider using [flow](https://content.minetest.net/packages/luk3yx/flow/)\ninstead for new forms.\n\nForm methods:\n\n - `form:show()` / `form:open()`: Displays the form.\n - `form:hide()` / `form:close()`: Closes the form.\n - `form:is_open()`: Returns `true` if the form is currently open.\n - `form:set_prepend(formspec)`: Sets text to prepend to the formspec. This has\n    nothing to do with global formspec prepends.\n - `form:set_formspec(formspec)`: Sets the formspec text. This does not modify\n    prepended text or appended text. Any change to this (or the prepend/append\n    values) is displayed immediately to the client.\n - `form:set_append(formspec)`: Sets text to append to the formspec before\n    displaying it.\n - `form:get_prepend`, `form:get_formspec`, `form:get_append`\n - `form:add_callback(function(form, fields))`: This creates a callback which\n    is called whenever form data is received from the client.\n - `form:add_callback(name, function(form, fields))`: Similar to the above,\n    however is only called if `fields` contains `name` (a string).\n - `form.context`: Private data stored with this `form` object. Not sent to\n    clients.\n - `form.pname`: The player name associated with this form. *Changing this will\n    not change the player the form is associated with.*\n\n*When a form is deleted (`form=nil`) and it is not open by the client, garbage\ncollection will allow the internal `formname` to be reused.*\n\n## Example snippets\n\n`get_connected_names`:\n```lua\nlocal res = {}\nfor _, player in ipairs(minetest.get_connected_players()) do\n    table.insert(res, player:get_player_name())\nend\nreturn res\n```\n\n`greeting_test`:\n```lua\nfor _, name in ipairs(snippets.run 'get_connected_names') do\n    minetest.chat_send_player(name, 'Hello ' .. name .. '!')\nend\n```\n",
  "maintainers": [
    "luk3yx"
  ],
  "media_license": "MIT",
  "name": "snippets",
  "provides": [
    "snippets"
  ],
  "release": 23940,
  "repo": "https://github.com/mt-historical/snippets",
  "score": 308.4,
  "screenshots": [
    "https://content.luanti.org/uploads/8gcRk3v1Xm.png"
  ],
  "short_description": "A way for admins to run and save Lua snippets.",
  "state": "APPROVED",
  "tags": [
    "developer_tools",
    "gui",
    "server_tools"
  ],
  "thumbnail": "https://content.luanti.org/thumbnails/1/8gcRk3v1Xm.png",
  "title": "Snippets",
  "translation_url": null,
  "type": "mod",
  "url": "https://content.luanti.org/packages/luk3yx/snippets/releases/23940/download/",
  "video_thumbnail_url": null,
  "video_url": null,
  "website": null,
  "dependencies": {
    "luk3yx/snippets": []
  },
  "hash": "1cvgr0fjccabfqqz9hxd8y1h065jg97vjmqw6vnpzi1ylwkqxcvy"
}
