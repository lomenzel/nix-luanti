{
  "author": "luk3yx",
  "content_warnings": [],
  "created_at": "2020-05-31T02:22:53.649260",
  "dev_state": "AS_IS",
  "donate_url": null,
  "downloads": 898,
  "forum_url": "https://forum.luanti.org/viewtopic.php?t=23504",
  "forums": 23504,
  "game_support": [],
  "issue_tracker": "https://github.com/luk3yx/minetest-sscsm/issues",
  "license": "LGPL-3.0-only",
  "long_description": "**This is a mod library and is useless by itself.**\n\n## How it works\n\nAny client with the CSM installed will automatically attempt to request SSCSMs\nfrom the server via a mod channel. If the server has this mod installed, it\nwill reply with a few messages containing the mod name and partially minified\nmod code. The CSM will then create a separate environment so SSCSMs cannot mess\nwith existing CSMs (and so CSMs do not accidentally interfere with SSCSMs), and\nexecute the SSCSMs inside this environment. *Note that it is trivial for users\nto modify this environment.* The server-side mod sends two \"built-in\" SSCSMs\nbefore and after all other SSCSMs to add extra helper functions (in the `sscsm`\nnamespace), to execute `register_on_mods_loaded` callbacks and attempt to leave\nthe mod channel.\n\n## Instructions\n\nTo create a SSCSM:\n\n - Install this mod onto a server.\n - Enable mod channels on the server (add `enable_mod_channels = true` to\n     minetest.conf).\n - Allow CSMs to send chat messages if you haven't already (add\n     `csm_restriction_flags = 60` to minetest.conf).\n - Create SSCSMs with the API.\n - Install the CSM (in the `csm/` directory) onto clients and enable it.\n\n### Preserving copyright and license notices\n\nThe minifier preserves comments starting with \"copyright\" or \"license\":\n(case-insensitive, excluding leading spaces).\n\nInput:\n\n```lua\n-- Copyright: 1\n-- License: 2\n-- A normal comment.\n--COPYRIGHT5\n\n...\n```\n\nOutput:\n\n```lua\n-- Copyright: 1\n-- License: 2\n--COPYRIGHT5\n...\n```\n\n## Server-side mod facing API\n\n*This API is subject to change.*\n\n### `sscsm.register(def)`\n\nRegisters a server-provided CSM with the following definition table.\n\n - `name` *(string)*: The name of the server-provided CSM. Please use the\n        `modname:sscsmname` convention. Cannot start with a colon or contain\n        newlines.\n - `code` *(string)*: The code to be sent to clients.\n - `file` *(string)*: The file to read the code from, read during the\n        `register()` call.\n - `depends` *(list)*: A list of SSCSMs that must be loaded before this one.\n\nThis definition table must have `name` and either `code` or `file`.\n\n### `sscsm.register_on_sscsms_loaded(function(name))`\n\nRegisters a function to be called when a client loads SSCSMs. Note that this\nfunction will not work unless CSMs have the ability to send chat messages as it\nrelies on the SSCSM communication API described below.\n\n### Communication with SSCSMs\n\nSSCSM provides an API inspired by\n[csm_com](https://github.com/DS-Minetest/csm_com) for sending private messages\nto clients. Unlike mod channels, only the target client gets these messages.\nAlthough the API is stable, the internal protocol will probably change in the\nfuture as better CSM API functions are added.\n\n*Note that channel names must not contain `\\001`/U+0001.*\n\n - `sscsm.com_send(player_or_name, channel, msg)`: Sends `msg`\n    (a JSON-compatible object) to `player_or_name` on the SSCSM com channel\n    `channel`. Channel names should be `modname` or `modname:name` to prevent\n    conflicts. *Although the theoretical limit for server-to-client messages is\n    128MiB, I strongly recommend not sending large messages when not\n    necessary.*\n - `sscsm.com_send_all(channel, msg)`: Sends `msg` to all clients that are\n    running SSCSMs.\n - `sscsm.register_on_com_receive(channel, function(name, msg))`: Registers a\n    function to be called when a message on `channel` is received from the\n    client. `msg` may be any JSON-compatible type, so checking the type of this\n    object is strongly recommended.\n - `sscsm.has_sscsms_enabled(name)`: Returns `true` if `name` has enabled\n    SSCSMs. This will not be `true` immediately after players join, however.\n\n#### Maximum SSCSM size\n\nBecause of Minetest network protocol limitations, the amount of data that can\nbe sent over mod channels is limited, and therefore the maximum SSCSM size is\n65300 (to leave room for the player name and future expansion). The name of the\nSSCSM also counts towards this total.\n\nBecause of this size limitation, SSCSMs are passed through a primitive code\nminifier that removes some whitespace and comments, so even if your code is\nabove this size limit it could still work.\n\n## Server-sent CSM facing API\n\nSSCSMs can access most functions on [client_lua_api.md](https://github.com/minetest/minetest/blob/master/doc/client_lua_api.md), as well as a separate `sscsm` namespace:\n\n - `sscsm.global_exists(name)`: The same as `minetest.global_exists`.\n - `sscsm.register_on_mods_loaded(callback)`: Runs the callback once all SSCSMs\n    are loaded.\n - `sscsm.register_chatcommand(...)`: Similar to\n    `minetest.register_chatcommand`, however overrides commands starting in `/`\n    instead. This can be used to make some commands have instantaneous\n    responses. The command handler is only added once `register_chatcommand`\n    has been called.\n - `sscsm.unregister_chatcommand(name)`: Unregisters a chatcommand.\n - `sscsm.get_player_control()`: Alternative for\n    `minetest.localplayer:get_control()` that works with Minetest 5.2.0 and\n    below.\n    - The `LMB` and `RMB` fields are deprecated and will probably be removed in\n      the future, use `dig` and `place` instead.\n - `sscsm.every(interval, func, ...)`: Calls `func` every `interval` seconds\n    with any extra parameters specified. Use `minetest.register_globalstep`\n    instead if `interval` is `0`.\n - `sscsm.restriction_flags`: The `csm_restriction_flags` setting set in\n    the server's `minetest.conf`.\n - `sscsm.restrictions`: A table based on `csm_restriction_flags`:\n    - `chat_messages`: When `true`, SSCSMs can't send chat messages or run\n        server chatcommands.\n    - `read_itemdefs`: When `true`, SSCSMs can't read item definitions.\n    - `read_nodedefs`: When `true`, SSCSMs can't read node definitions.\n    - `lookup_nodes_limit`: When `true`, any get_node calls are restricted.\n    - `read_playerinfo`: When `true`, `minetest.get_player_names()` will return\n        `nil`.\n - `sscsm.com_send(channel, msg)`: Sends `msg` (a JSON-compatible object) to\n    the server. *Note that client-to-server messages cannot be long, for plain\n    strings the channel and message combined must be at most 492 characters.*\n - `sscsm.register_on_com_receive(channel, function(msg))`: Registers a\n    function to be called when a message on `channel` is received from the\n    server.\n\nTo communicate with the server-side mods, it is possible to open a mod\nchannel.\n\n### CSM restriction flags example\n\n```lua\nminetest.register_chatcommand('m', {\n    description = 'Alias for /msg',\n    func = function(param)\n        if sscsm.restrictions.chat_messages then\n            return false, 'Sorry, csm_restriction_flags prevents chat messages'\n                .. ' from being sent.'\n        end\n        minetest.run_server_chatcommand('msg', param)\n    end,\n})\n```\n\n*Note that modifying `sscsm.restrictions` or `sscsm.restriction_flags` will\nnot add or remove restrictions and is not recommended.*\n\n## Security considerations\n\nDo not trust any input sent to the server via SSCSMs (and do not store\nsensitive data in SSCSM code), as malicious users can and will inspect code and\nmodify the output from SSCSMs.\n\nI repeat, **do not trust the client** and/or SSCSMs with any sensitive\ninformation and do not trust any output from the client and/or SSCSMs. Make\nsure to rerun any privilege checks on the server.\n\n### Other recommendations\n\nAlthough it is possible to kick clients that do not support SSCSMs, this has\nnot been implemented. Some users may not want to allow servers to automatically\ndownload and run code locally for security reasons. Please try and make sure\nclients without SSCSMs do not suffer from major functionality loss.",
  "maintainers": ["luk3yx"],
  "media_license": "LGPL-3.0-only",
  "name": "sscsm",
  "provides": ["sscsm"],
  "release": 12780,
  "repo": "https://gitlab.com/luk3yx/minetest-sscsm",
  "score": 0,
  "screenshots": ["https://content.luanti.org/uploads/2IeIBGZnYI.png"],
  "short_description": "A server-sent CSM library.",
  "state": "APPROVED",
  "tags": ["library"],
  "thumbnail": "https://content.luanti.org/thumbnails/1/2IeIBGZnYI.png",
  "title": "SSCSM implementation",
  "translation_url": null,
  "type": "mod",
  "url": "https://content.luanti.org/packages/luk3yx/sscsm/releases/12780/download/",
  "video_thumbnail_url": null,
  "video_url": null,
  "website": null,
  "dependencies": {
    "luk3yx/sscsm": []
  },
  "hash": "1dpar9nr61igssyl4jzdzfakq2hqc38qgcvcs4fp203yh6hks2ds"
}
