{
  "author": "MisterE",
  "content_warnings": [],
  "created_at": "2022-12-23T21:17:54.084882",
  "dev_state": "ACTIVELY_DEVELOPED",
  "donate_url": null,
  "downloads": 1436,
  "forum_url": null,
  "forums": null,
  "game_support": [],
  "issue_tracker": "https://github.com/MisterE123/luamap/issues/new/choose/",
  "license": "MIT",
  "long_description": "For an example of how to use the api, see example.lua and my mandeland mod \nhttps://content.minetest.net/packages/MisterE/mandeland/\n\n\n## Intro and usage\nLuamap is a library for modders to focus on mapgen logic rather than figuruing\nout how mapgen works. using it is simple: override the luamap.logic function.\nThe goal of the luamap logic function is to return a content id at a point.\n\nCalling the old logic function before running your own logic allows you to add\nto other mods that use luamap. If you do not save and call the old luamap\nfunction, then your mod will completely override any other mapgens made by other\nmods using luamap.\n\n```lua\nlocal c_stone = minetest.get_content_id(\"default:stone\")\nlocal c_water = minetest.get_content_id(\"default:water_source\")\nlocal water_level = 0\nlocal old_logic = luamap.logic\nfunction luamap.logic(noise_vals,x,y,z,seed,original_content)\n    -- get any terrain defined in another mod\n    local content = old_logic(noise_vals,x,y,z,seed,original_content)\n    -- use our own logic to add to that logic \n    -- make any nodes below sea level water and below stone level stone\n    if y < water_level then\n        content = c_water\n    end\n    if y < -3 then\n        content = c_stone\n    end\n    return content\nend\n```\n\nThis would make a flat mapgen covered in a layer of water.\n\nluamap gives you an easy way to make and use 2d and 3d noises in your mapgen:\n\n```lua\n-- 2d noise mapgen\nluamap.register_noise(\"terrainmap\",{\n    type = \"2d\",\n    np_vals = {\n        offset = 0,\n        scale = 1,\n        spread = {x=384, y=256, z=384},\n        seed = 5900033,\n        octaves = 5,\n        persist = 0.63,\n        lacunarity = 2.0,\n        flags = \"\"\n    },\n    ymin = -31000,\n    ymax = 31000,\n})\n\nlocal c_stone = minetest.get_content_id(\"default:stone\")\nlocal c_water = minetest.get_content_id(\"default:water_source\")\nlocal water_level = 0\nlocal old_logic = luamap.logic\nfunction luamap.logic(noise_vals,x,y,z,seed,original_content)\n    -- get any terrain defined in another mod\n    local content = old_logic(noise_vals,x,y,z,seed,original_content)\n\n    if y < water_level then\n        content = c_water\n    end\n    if y < noise_vals.terrainmap * 50 then\n        content = c_stone\n    end\n\n    return content\nend\n```\n\nyou can also register a 3d noise like so:\n```lua\nluamap.register_noise(\"terrainmap\",{\n    type = \"3d\",\n    np_vals = {\n        offset = 0,\n        scale = 1,\n        spread = {x=384, y=384, z=384},\n        seed = 5900033,\n        octaves = 5,\n        persist = 0.63,\n        lacunarity = 2.0,\n        flags = \"\"\n    },\n    ymin = -31000,\n    ymax = 31000,\n})\n```\n\n## API\n\n### luamap.logic\n```lua\nluamap.logic(noise_vals,x,y,z,seed,original_content)\n```\n\nDESCRIPTION: Override this function to define mapgen logic. Best practice is to\nsave the original function and call it to get a preset content id from any\npreviously-defined mapgens.\n\nPARAMETERS:\n\n`noise_vals` \n\nA table indexed by noise names defined with `luamap.register_noise()`. So, if I\nhave registered 2 noises: `terrain_2d` and `caves_3d` then noisevals might be: \n\n```lua\n{\n    [\"terrain_2d\"] = .7,\n    [\"caves_3d\"] = -.9,\n}\n```\n\n`x,y,z`\n\nThe coordinates of the position to set the content for\n\n`seed`\n\nThe seed passed to minetest.register_on_generated()\n\n`original_content`\n\nThe content id that the original mapgen created. Air if set to singlenode.\n\nRETURNS:\n\nshould return a content id such as that gotten from\n`minetest.get_content_id(\"nodename\")`\n\nNOTES:\nremember that this function is called for every single node ever generated.\nKeep your calculations fast or the mapgen will slow down.\n2d noise is much faster than 3d noise.\n\n### luamap.register_noise\n\n```lua\nluamap.register_noise(name,data)\n```\n\nDESCRIPTION: creates a mapgen noise that will be calculated and returned in\n`luamap.logic`\n\nPARAMETERS: \n\n`name`\n\nString, the name of the noise\n\n`data` \n\ntable, the noise data:\n\n```lua\n{\n    type = \"2d\", -- or \"3d\"\n    np_vals = { -- noise params, see minetest lua api\n        offset = 0,\n        scale = 1,\n        spread = {x=384, y=256, z=384},\n        seed = 5900033,\n        octaves = 5,\n        persist = 0.63,\n        lacunarity = 2.0,\n        flags = \"\"\n    },\n    ymin = -31000,\n    ymax = 31000,\n}\n```\nNOTES:\n`ymin` and `ymax` define a range in which to calculate the noise. This is useful\nfor making realms: a noise might not be needed in a certian y-range. Note that\nif the position passed to `luamap.logic` is outside of the y-range, then\n`noise_vals` will not contain that noise, which saves on calculation times. Be\nsure to set the y-range to completely encompass the range that you expect to\nfind your noises. \n\n\n### luamap.precalc\n\n```lua\nluamap.precalc(data, area, vm, minp, maxp, seed)\n```\n\nDESCRIPTION: An overridable function called just before calculating the noise\nand calling the logic function for each node.  Best practice is to save the old\nfunction and call it before adding one's own logic, just like with\n`luamap.logic`\n\n\n### luamap.postcalc\n\n```lua\nluamap.postcalc(data, area, vm, minp, maxp, seed)\n```\n\nDESCRIPTION: An overridable function called just before setting the map lighting\nand data after the noise has been calculated and luamap.logic has been called\nfor each node in the mapblock. It offers compatability with biomegen by GaÃ«l de\nSailly, which needs these parameters to function. Best practice is to save the\nold function and call it before adding one's own logic, just like with\n`luamap.logic`\n\nexample:\n```lua\nlocal old_postcalc = luamap.precalc\nfunction luamap.postcalc(data, area, vm, minp, maxp, seed)\n    old_postcalc(data, area, vm, minp, maxp, seed)\n    biomegen.generate_all(data, area, vm, minp, maxp, seed)\nend\n```\n\n### luamap.set_singlenode\n\n```lua\nluamap.set_singlenode()\n```\n\nDESCRIPTION: Sets the mapgen to singlenode. Do not call this if you intend to\nmake a realm, only call if you intend to completely replace engine mapgens\n\nNo params, returns nothing.\n\n## HELPER FUNCTIONS\n\n### luamap.remap\n\n```lua\nluamap.remap(val, min_val, max_val, min_map, max_map)\n```\n\nDESCRIPTION: remaps a value between a range of values to a new range of values\n\nPARAMETERS: \n\n`val`\nvalue to remap\n`min_val`\nold range minimum\n`max_val`\nold range maximum\n`min_map`\nnew range min\n`max_map`\nnew range max\n\nNOTES:\n\nMinetest's perlin noises range from -2 to 2. If you want a noise that ranges\nfrom 0 to 1, then you can use remap:\n\n```lua\nmynoise = noisevals.mynoise\nmynoise = luamap.remap(mynoise, -2, 2, 0, 1)\n```\n### luamap.lerp\n\n```lua\nluamap.lerp(var_a, var_b, ratio, power)\n```\nDESCRIPTION: a linear interpolation function\nInterpolates between 2 values\n\nPARAMETERS:\n`var_a`\nfirst value to interpolate between\n\n`var_b`\nsecond value to interpolate between\n\n`ratio` \nnumber between 0 and 1 interpolation ratio: 0 is 100% var_a, 1 is 100%\nvar_b, values between 0 and 1 return a mix of var_a and var_b\n\n`power` \n(optional, default 1) controls the exponent of the power. By default, it\nis 1, which gives linear interpolation. 3 would give cubic interpolation. \nControls the shape of the interpolation curve.\n\nNOTES:\n\nuseful for mixing two noises. If you use a third noise as the ratio, you can\nhave areas that are mostly controlled by one noise, and other areas controlled\nby another noise.\n\n### luamap.coserp\n\n```lua\nluamap.coserp(var_a,var_b,ratio)\n```\n\nDESCRIPTION:\nSame as `luamap.lerp` but uses cosine interpolation for a smoother curve.\n",
  "maintainers": ["MisterE"],
  "media_license": "MIT",
  "name": "luamap",
  "provides": ["luamap"],
  "release": 30087,
  "repo": "https://github.com/MisterE123/luamap",
  "score": 171.1,
  "screenshots": [
    "https://content.luanti.org/uploads/cf907b2087.png",
    "https://content.luanti.org/uploads/2eedadbe35.png"
  ],
  "short_description": "An easy-to-use api for lua mapgens that takes the pain out of mapgen coding. Focus on mapgen logic, not on voxelmanipulation. ",
  "state": "APPROVED",
  "tags": ["custom_mapgen", "library", "mapgen"],
  "thumbnail": "https://content.luanti.org/thumbnails/1/cf907b2087.png",
  "title": "Luamap",
  "translation_url": null,
  "type": "mod",
  "url": "https://content.luanti.org/packages/MisterE/luamap/releases/30087/download/",
  "video_thumbnail_url": null,
  "video_url": null,
  "website": null,
  "dependencies": { "MisterE/luamap": [] },
  "hash": "0mv9yfvbgx4jwk6jna61f4svn5zwcsvay657g39bsp3zrv1khhkf"
}
