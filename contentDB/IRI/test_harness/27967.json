{
  "author": "IRI",
  "content_warnings": [],
  "created_at": "2024-10-11T10:48:19.238739",
  "dev_state": "ACTIVELY_DEVELOPED",
  "donate_url": null,
  "downloads": 45,
  "forum_url": null,
  "forums": null,
  "game_support": [],
  "issue_tracker": null,
  "license": "AGPL-3.0-only",
  "long_description": "# Docker Test Harness for Minetest Mods\n\n## Overview\n\nThis mod provides an automated testing framework for Minetest mods by simulating player behavior on a Minetest server. It allows developers to create, register, and run tests to ensure the correct behavior of their mods in various scenarios.\n\n## Features\n\n- **Test Registration**: Easily register custom tests for your mod.\n- **Player Behavior Simulation**: Simulate player actions for automatic testing.\n- **Modular Structure**: Each test is associated with a specific mod and can be customized.\n- **Area and Node Manipulation**: Test areas can be defined, and node checks can be performed.\n- **Test Context and State Management**: Manage and track the progress of tests across multiple mods.\n\n## Prerequisite\n\nThe tests are run using Docker or Podman. Therefore you'll need to have either one of them installed.\nIt also uses `bash`, `jq` and the gnu version of `mktemp` (found in the `coreutils` package for Alpine).\nFor automated testing, the mod is testing itself, so this repository shows an example of configuration\nfor the Gitlab CI. The main point being to have runners able to run docker pipelines and do docker in docker.\n\n## Usage\n\nThis mod's goal is to provide a test framework for implementing tests for minetest mods.\n\n1. Declare `test_harness` as an optional dependencies for your mod\n2. Copy the `.util` folder in your project\n3. Copy the `.util/.mod_env.json.tmpl` to `.mod_env.json` at the root of your folder.\n4. Adapt its content. Do not remove the test_harness dependency definition.\n5. The list of mods to test can be set in the `additional_mods` key. This list will be added to `current_mod`, if you add some mods, the list must start with a comma.\n6. Customize the minetest server configuration by adding configuration values in the `minetest_add_conf` value. This must be a single string, with line returns if necessary.\n7. You can add some file to the server's container with the `additional_files` value. This is an array of object having the `\"path\"` and `\"content\"` keys. If the content is in `json` then it is directly added as is in the resulting file.\n8. If necessary, customize the `.util/Dockerfile` if the previous means are not sufficients.\n9. In your source files (in the `init.lua` for example) add the following lines (or equivalent)\n\n    ```lua\n    if minetest.settings:get_bool(\"test_harness_run_tests\", false) then\n        dofile(minetest.get_modpath(\"my_mod\").. \"/test/init.lua\")\n    end\n    ```\n\n10. In your test file(s), get an instance of the method allowing the registration of your tests:\n\n   ```lua\n   local register_test = test_harness.get_test_registrator(\"my_mod\", my_mod.version_string)\n   ```\n\n11. Register the test by calling `register_test`\n12. Run the test by lauching the `run_tests.sh` script. For example with Podman\n\n    ```shell\n    $ .util/run_tests.sh --podman -c 1\n    ```\n\n    See the available options with `.util/run_tests.sh --help`\n\n## Sources\n\n- The base pf the code comes from the WorldEdit mod project : https://github.com/Uberi/Minetest-WorldEdit.\n- The client's Dockerfile has been adapted from `Miney-pi` (https://github.com/miney-py/minetest-client-docker)\n- The color management code comes from `lua-chroma`: https://github.com/ldrumm/lua-chroma\n\n## License\n\nLicensed under the AGPL (Affero General Public License).\n\n## Funding\n\nThis mod is published with [funding from the NLNet Foundation](https://nlnet.nl/project/MinetestEdu/).\n",
  "maintainers": ["IRI"],
  "media_license": "AGPL-3.0-only",
  "name": "test_harness",
  "provides": ["test_harness"],
  "release": 27967,
  "repo": "https://forge.apps.education.fr/iri/minetest/docker_test_harness",
  "score": 2,
  "screenshots": ["https://content.luanti.org/uploads/bdbebd6459.jpg"],
  "short_description": "Provides an automated testing framework by simulating player behavior on a server. It allows developers to create, register, and run tests to their packages",
  "state": "APPROVED",
  "tags": ["complex_installation", "developer_tools"],
  "thumbnail": "https://content.luanti.org/thumbnails/1/bdbebd6459.png",
  "title": "Test Harness",
  "translation_url": null,
  "type": "mod",
  "url": "https://content.luanti.org/packages/IRI/test_harness/releases/27967/download/",
  "video_thumbnail_url": null,
  "video_url": null,
  "website": null,
  "dependencies": {
    "IRI/test_harness": []
  },
  "hash": "17155vdzb6xvas7sj5h73s0r6g2jad4jz5g8annq20hhvp3d1ybv"
}
