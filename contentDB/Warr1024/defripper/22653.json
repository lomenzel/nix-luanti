{"author":"Warr1024","content_warnings":[],"created_at":"2022-11-23T19:26:34.287247","dev_state":"BETA","donate_url":"https://liberapay.com/Warr1024","downloads":485,"forum_url":null,"forums":null,"game_support":[],"issue_tracker":null,"license":"MIT","long_description":"# Node/Item Definition Ripper\n\n*You're making a puzzle/adventure game, and you need building materials for the scenery.  It's a bother to make all original artwork, or you like the look and feel of something that already exists, but it comes with all this extra functionality that you don't want...*\n\nThis mod will allow you to export the \"superficial\" definitions and media for selected items.  This includes visuals, sounds, and basic physical properties (solid/liquid/gas, climbable, lighting) but none of the callbacks or other gameplay behavior.  This makes them ideal for:\n\n- \"inert\" decorative nodes in \"adventure\" gameplay modes where most of the scenery is non-interactable and only a few puzzle pieces have specific mechanics.\n- exporting your sculptures and builds as playable games (e.g. using modgen to convert a build into a mapgen mod) with only carefully chosen mechanics receated (e.g. working doors for access) but without the rest.\n- pruning a complex game, with a lot of unused items, definitions, and mechanics, for smaller downloads, faster load times, and reduced memory usage.\n\nThe hope is that this mod will allow experienced creative-mode builders to use familiar tools to build scenery, backgrounds, maps and levels, and then export those things for use in games.  Formats like schematics, worldedit or modgen provide the \"geometry\" aspect of map export; this mod can be used to get the \"material\" aspect.\n\n## Usage\n\nAdd the mod to a game that has all the things loaded that you want to export, instruct the mod which items to export (using chat commands), and it will dump the start of a mod that can be used to import item registrations into your game.\n\nYou will get a folder in your worldpath containing a skeletal mod:\n\n- All media files referenced by the items, split into textures/sounds/models.\n- An `exported.lua` file with each definition.\n- A `mediasource.json` file that identifies the mod source of each media file included, for help tracing licensing and attribution.\n- A `defripper.json` file that stores the configuration, and can be used to \"rehydrate\" the configuation in another world with the same mods installed, making it possible to incrementally extend the extracted data without needing to keep the entire original world around.\n\nYou will need to provide your own `init.lua`, `mod.conf` and other infrastructure, but the exported definitions are kept in a separate file so you can safely overwrite it later (e.g. if you add definitions) without destroying your custom logic.\n\n`exported.lua` takes a register_item-like function as a file-level parameter.\n\n- This function will receive a single parameter with the definition table; it does NOT get an item name.\n- There is a `_raw_name` key inside the definition from which you will need to derive your own name in a manner you deem appropriate (you have an opportunity to customize before registration here).\n- Aliases are exported using the same format, but they will only have an `_alias_to` that will point to the _raw_name of the node the alias is pointing to.\n\nExample:\n```lua\nlocal modname = minetest.get_current_modname()\nloadfile(minetest.get_modpath(modname) .. \"/exported.lua\")(function(def)\n\tlocal myname = modname .. \":\" .. def._raw_name:gsub(\":\", \"__\")\n\tif def._alias_to then\n\t\tlocal myalias = modname .. \":\" .. def._alias_to:gsub(\":\", \"__\")\n\t\treturn minetest.register_alias(myname, myalias)\n\tend\n\tdef._raw_name = nil\n\treturn minetest.register_item(myname, def)\nend)\n```\n\nBy keeping your custom logic and overrides in a separate set of files, and not modifying the defripper output files, you can just delete and reimport the auto-generated content any time you want to change the set of items you're exporting, or any time you pull updates from upstream and want to marge them into your own version.\n\n## Licensing Warning\n\nYou are still responsible for complying with licensing for all media files in the export.  This includes:\n\n- Tracing the origin of each file (the names should match, and be unique in any sane setup) and identifying the author and original license.\n- Including attribution/credit in your resultant project.\n- Complying with sublicensing requirements when selecting the license for your own projet containing these media.\n- Anything else required by the license that applies to any file you use.\n\nThis tool may also rip media from \"private\" mods you might have installed, including things you don't actually have the right to redistribute; you are responsible for manually ensuring these are not included in any product you create using this tool.\n\n## Commands\n\nMinetest \"items\" includes all nodes, craftitems and tools.  The definition ripper mod supports exporting all of them, though it is more focused on nodes.\n\n### Basic Commands\n\nHand-pick which definitions to export.\n\n- `/defripper` - re-export all item definitions already marked for export (saved in mod storage).\n- `/defripper_clear` - clear all saved definitions.\n- `/defripper_add <pattern>` - add all definitions whose technical name (modname:item_name) matches the given lua pattern.\n- `/defripper_rm <pattern>` - remove all definitions whose technical name (modname:item_name) matches the given lua pattern.\n- `/defripper_inv` - add all definitions for items currently in the player's inventory.\n\n### Area-Scanning Commands\n\nAutomatically export all materials used in an area.\n\nFor each of these commands, if the `defripper_node_inv` setting is `true` (default `false`), it will descend into node meta inventories and rip items found there as well.\n\n- `/defripper_here [rx [ry [rz]]]` - rip all nodes/items within a cuboid/rectanguloid centered around the player, right now.\n- `/defripper_step [rx [ry [rz [step]]]]` - rip all nodes/items within a cuboid/rectanguloid centered around the player, continuously, every time the player moves `step` nodes, until the server is restarted or command is re-run to change it.  `/defripper_step 0` disables it.\n\n### Extra Media Commands\n\nAdd additional media to the export, even if not referenced directly by a definition.\n\nThis is useful if you intend to recreate some mechanics/behavior in the downstream product, and want to include the media associated with it that aren't directly referenced by the definition itself.  Example: door opening/closing sounds.\n\n- `/defripper_m_add <pattern>` - add all media whose filename matches the given lua pattern.\n- `/defripper_m_rm <pattern>` - remove all media whose filename matches the given lua pattern.\n\n## Advanced Usage\n\n### Recreating World for Updates\n\nIt is not necessary to keep the original world you used defripper on to update your definitions, so long as you can recreate that world with the same mods.\n\n- The defripper export contains its config, and you can copy it all back into the corresponding dir in the recreated world to restore state.\n- defripper will warn you if there are any mods you're missing when trying to re-export.  Finding the correct version, when forks exist, is still your responsibility, so you may want to keep note of which versions things were based on.\n- Media files are NOT updated by default if they already exist in the dump, so you can use alternative or texturepack versions if you want.  New ones are still added, and unused ones are still pruned.  If you want to force an update, remove the affected media from the export.\n\n### Custom Property Filtering\n\nA `customfilter.lua` file can be loaded in the `defripper` dir inside the world path.  If present, it will be loaded each time definitions are dumped.  It must return a function, which:\n\n- Takes `(filtered, name, def)` as input parameters\n  - `filtered` is the definition to dump, pre-filtered by defripper.\n  - `name` is the original name of the registered item.\n  - `def` is the original registered item definition.\n- Returns one of:\n  - `nil` to keep the existing `filtered` table for the export (which can also be modified by the filter function in-place).\n  - `false` to exclude this item entirely from export.\n  - any **table**, to replace the filtered table in the export.\n\nExample `customfilter.lua` that excludes all non-node items:\n\n```lua\nreturn function(filtered, name, def)\n\tif def.type ~= \"node\" then return false end\n\treturn filtered -- or nil\nend\n```","maintainers":["Warr1024"],"media_license":"MIT","name":"defripper","provides":["defripper"],"release":22653,"repo":"https://gitlab.com/sztest/defripper","score":151.2,"screenshots":["https://content.luanti.org/uploads/b24067bf2a.png"],"short_description":"Generate inert facades from node/item definitions for use in other games","state":"APPROVED","tags":["building","chat","creative","decorative","library"],"thumbnail":"https://content.luanti.org/thumbnails/1/b24067bf2a.png","title":"Definition Ripper","translation_url":null,"type":"mod","url":"https://content.luanti.org/packages/Warr1024/defripper/releases/22653/download/","video_thumbnail_url":null,"video_url":null,"website":null,"dependencies":{"Warr1024/defripper":[]},"hash":"0bic44ddjgfr1nj0wa8pilqanwlxm81zqf2c1ybbjcn9l9imvjvg"}