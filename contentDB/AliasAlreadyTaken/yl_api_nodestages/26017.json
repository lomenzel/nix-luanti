{"author":"AliasAlreadyTaken","content_warnings":[],"created_at":"2024-07-18T02:49:34.907511","dev_state":"MAINTENANCE_ONLY","donate_url":"https://ko-fi.com/yourland","downloads":415,"forum_url":null,"forums":null,"game_support":[],"issue_tracker":"https://gitea.your-land.de/your-land/yl_api_nodestages/issues","license":"MIT","long_description":"# yl_api_nodestages\n\n## Purpose\n\nThis mod is a library which brings various nodestage-related functions.\n\n## Download\n\nGet it from https://gitea.your-land.de/your-land/yl_api_nodestages\n\n## Installation\n\n1. Copy the \"yl_api_nodestages\" folder to your mod directory.\n2. Enable the mod in your world.mt file.\n\n## Configuration\n\n```\nyl_api_nodestages.debug = false\n```\nSet to true to enable debug mode\n\n```\nyl_api_nodestages.run_lbm = true\n```\n\nSet to true to enable the timer restart lbm, set to false to disable it\n\n## Usage\n\nThis mod can be used in singleplayer and multiplayer. It comes with no direct content but exposes functions you can use in your mod.\n\n### Data structure\n\nOne stage consists of at least the stage_name, next_stages and duration. \n\n```lua\nlocal stage = {\n    {\n        stage_name = \"modname:nodename\", -- required, string, nodename to attach this stage to, must not exist previously\n        next_stages = \"modname:same_or_other_nodename\", -- required, string or table (see below), if missing last stage is assumed\n        --    OR \n        next_stages = { -- required if not last stage, table format\n            {\n                \"modname:same_or_other_nodename\", -- required, string, target nodename must exist\n                50,  -- optional, number, chance for the node to switch to this target, defaults to 1\n                { can_set = mymod.optional_can_set_function, more_functions = ... }, -- optional, table, callback table of known keys and function values\n                { param1 = 90, param2 = 107, ... } -- optional, table, metadata table of known keys and whatever values they want\n            },\n            { \"modname:same_or_other_nodename\"}, -- as above, but without any optional fields\n            { \"other_modname:their_nodename\"} -- as above, but targets a node from different mod\n        },\n        duration = 120, -- required, number, fixed duration of stage in seconds, if missing last stage is assumed\n        tiles = {\"modname_nodename_texturename.png\", ... }, -- required, table, table of tiles\n        description = \"Node description\", -- required, string, node description\n        -- Optional \"Node definition\" aka \"Used by minetest.register_node\"\n        node_definition = {\n            drawtype = \"normal\",\n            ...\n        },\n        overwrite = false, -- optional, boolean, false breaks during registration if the node has on_timer or on_construct. true overwrites regardless\n        restart = true, -- optional, boolean, true restarts the nodetimer via lbm, false does not\n        _previous = {}, -- DO NOT USE, this holds the history to be accessed by delete_stage only\n        _version = 1, -- DO NOT USE, this holds the version of the datastructure, will increase when datastructure changes\n    }\n}\n```\n\nA list of `{stage}` sit in a table `stages`:\n\n```lua\nlocal stages = {\n    {stage},\n    {stage},\n    ...\n}\n```\n\n### Modmakers\n\nUse the following public functions related to nodestages.\n\n```lua\nyl_api_nodestages.get_stage(modname, nodename)\n```\n\nGets a table with the values of the stage attached to the given `modname:nodename`. Returns `true, {stage}` or `false, errormessage` if an error occurred.\n\n```lua\nyl_api_nodestages.create_stagenode(stage)\n```\n\nCreates the node without attaching the stage. Returns `true` if the node was successfully created. Returns `false, \"errormessage\"` if not.\n\n```lua\nyl_api_nodestages.add_stage(stage)\n```\n\nAttaches a stage to an existing node. Returns `true` if the stage was successfully attached. Only successful if the stage does not yet exist. Returns `false, \"errormessage\"` if not.\n\n```lua\nyl_api_nodestages.overwrite_stage(stage)\n```\n\nAttaches a stage to an existing node. Returns `true` if the stage was successfully attached, regardless whether the stage already exist. Returns `false, \"errormessage\"` if not.\n\n```lua\nyl_api_nodestages.rollback_stage(modname, nodename)\n```\n\nRolls a stage of an existing node back to the stage before the last overwrite. Returns `true` if the stage was successfully rolled back. Returns `false, \"errormessage\"` if not.\n\n```lua\nyl_api_nodestages.delete_stage(modname, nodename)\n```\n\nDeletes the stage (including cached previous stages) from an existing node. Returns `true` if the stage was successfully removed. Returns `false, \"errormessage\"` if not.\n\n```lua\nyl_api_nodestages.register_stage(stage)\n```\n\nRegisters a single `stage`, calls create_stage and add_stage. Returns `true` if the stage was successfully registered. Returns `false, \"errormessage\"` if not.\n\n```lua\nyl_api_nodestages.register_stages(stages)\n```\n\nRegisters all given `stages`, calls create_stage and add_stage. Returns `true, good, bad, total, {}` if all stages were registered successfully. Returns `false, good, bad, total, {reasons}` if at least one stage was not successfully registered.\n\n```lua\nyl_api_nodestages.validate_all_stages()\n```\n\nValidates all stages currently attached to any node. Returns `true, good, bad, total, {}` if all stages were validated successfully. Returns `false, good, bad, total, {reasons}` if at least one stage was not successfully validated.\n\n## Limitations\n\n* No randomized duration except by registering the same stage as a next_stage again\n* Core nodes cannot have stages, examples are `air` and `ignore`\n* Unclear: About 1 Million active stages may cause `Server::ActiveObjectMgr::addActiveObjectRaw(): no free id available`\n\n## Alternatives\n\n* Implement nodetimers, ABMs or LBMs\n\n## Supported versions\n\nIf you use yl_api_nodestages, but something is wrong, please [file a bug](https://gitea.your-land.de/your-land/yl_api_nodestages/issues/new). PRs also welcome.\n\nThere is no reason to believe it doesn't work anywhere, but you never know.\n\n## Allied projects\n\n* [yl_canned_food](https://gitea.your-land.de/your-land/yl_canned_food/)\n\n## Uninstall\n\nRemove it from your mod folder or deactivate it in your world.mt\n\nMods that depend on it will cease to work, if the mod is removed without proper replacement.\n\n## License\n\nSee [LICENSE.md](https://gitea.your-land.de/your-land/yl_api_nodestages/src/LICENSE.md)\n\n* Code MIT Developername\n* Screenshot CC0 Styxcolor\n\n## Thank you\n\n* Original canned_food author: https://github.com/h-v-smacker\n* AspireMint\n* Styxcolor","maintainers":["AliasAlreadyTaken"],"media_license":"CC0-1.0","name":"yl_api_nodestages","provides":["yl_api_nodestages"],"release":26017,"repo":"https://gitea.your-land.de/your-land/yl_api_nodestages.git","score":11.5,"screenshots":["https://content.luanti.org/uploads/979fd7ba3e.png"],"short_description":"An API for nodestages, which convert into other nodes","state":"APPROVED","tags":["library"],"thumbnail":"https://content.luanti.org/thumbnails/1/979fd7ba3e.png","title":"API Nodestages","translation_url":null,"type":"mod","url":"https://content.luanti.org/packages/AliasAlreadyTaken/yl_api_nodestages/releases/26017/download/","video_thumbnail_url":null,"video_url":null,"website":null,"dependencies":{"AliasAlreadyTaken/yl_api_nodestages":[]},"hash":"0rlf53jc2q2wfrfv7h6qn78aprrvi74cza0wbyhqg05gxfn7yirb"}