{
  "author": "FaceDeer",
  "content_warnings": [],
  "created_at": "2020-11-23T00:05:06.934770",
  "dev_state": null,
  "donate_url": null,
  "downloads": 925,
  "forum_url": null,
  "forums": null,
  "game_support": [],
  "issue_tracker": "https://github.com/FaceDeer/name_generator/issues",
  "license": "MIT",
  "long_description": "LuaNameGen is a tool to quickly generate random names for characters, objects and places. It is useful for both table-top games (run the script, grab the name) or to be used as a library for game development. This mod exposes the LuaNameGen API for other Minetest mods to use.\n\nThis script is shamelessly inspired by the great `libtcod's namegen`, written by Dominik \"Mingos\" Marczuk. It even uses its syntax for .cfg files, aiming to provide compatibility with its existing sets.\n\n# Basic usage\n\nTo get a dwarf name and surname, using default sets, just do:\n\n\tname_generator.parse_lines(io.lines(modpath..\"/data/creatures.cfg\")) -- loads the config file that includes dwarf names\n\n\tlocal name = name_generator.generate(\"dwarf male\")  --  Dolin\n\tlocal surname = name_generator.generate(\"dwarf surname\")  --  Steelcutter\n\t\n# Like-a-boss usage\n\nTo get whatever you want, call for a name set with the rule you want:\n\n    local syllable_a = name_generator.generate_custom(\"orc female 2\", \"$A$10B\")  --  Bragluk\n    local syllable_b = name_generator.generate_custom(\"giant female\", \"$B$10B\")  --  tuhli\n    local syllable_c = name_generator.generate_custom(\"infernal 1\", \"-$B$B\")  -- -mozraz\n    print(\"It's alive!!!\", syllable_a .. syllable_b .. syllable_c)  -- It's alive!!!   Bragluktuhli-mozraz\n\n# How does it work?\n\nEach set file (also plain text files) follows a simple syntax (libtcod's syntax, so any .cfg file from it can be used), and may contains multiple sets. This is an example of a basic set:\n\n\tname \"dwarf male\" {\n\t\tsyllablesStart  = \"Do, Due\"\n\t\tsyllablesEnd = \"lin, rin\"\n\t\trules = \"$s$e\"\n\t}\n\nThis set with its only rule would generate names such as:\n\n* Dolin\n* Dorin\n* Duelin\n* Duerin\n\n# Syllable Groups\n\nEvery syllable group has a matching symbol (used rules, `s` and `e` in the previous example) that matches it, and will, after parsed, be stored under a specific key on the parser data table:\n\n|   symbol | group name          |parser field               |\n|----------|:--------------------|:-------------------------:|\n|   s      | syllablesStart      |parser_data[\"start\"]       |\n|   m      | syllablesMiddle     |parser_data[\"middle\"]      |\n|   e      | syllablesEnd        |parser_data[\"end\"]         |\n|   P      | syllablesPre        |parser_data[\"pre\"]         |\n|   p      | syllablesPost       |parser_data[\"post\"]        |\n|   v      | phonemesVocals      |parser_data[\"vocals\"]      |\n|   c      | phonemesConsonants  |parser_data[\"consonants\"]  |\n|   A      | customGroupA        |parser_data[\"cga\"]         |\n|   B      | customGroupB        |parser_data[\"cgb\"]         |\n|   ...    | ...                 |...                        |\n|   N      | customGroupN        |parser_data[\"cgn\"]         |\n|   O      | customGroupO        |parser_data[\"cgo\"]         |\n|   ?      | phonemesVocals/     |parser_data[\"vocals\"]/     |\n|          | phonemesConsonants  |parser_data[\"consonants\"]  |\n\n# Rules\n\nConsidering the basic example above, if you replace its rule for \"$e$s\", that would swap syllables in the generated names.\n\nIt is possible to set a chance of adding a syllable. The rule \"$s$e$50e\" would have fifty percent chance of adding a third syllable from `syllablesEnd` group (or the matching group of the letter you pass).\n\nIf you want to have multiple rules for a same set, simply separate them with a comma:\n\n    rules = \"$e$s, $s$e\"\n\nEach rule would have an equal chance to be used at each generation. If desired, you can give specific chances for each rule (by default they all have the same chance of being used):\n\n    rules = \"%50$e$s, $s$e\"\n\nInstead of each rule having 1/2 chance to be used, the first one would have 1/2*50% chance.\n",
  "maintainers": ["FaceDeer"],
  "media_license": "MIT",
  "name": "name_generator",
  "provides": ["name_generator"],
  "release": 5566,
  "repo": "https://github.com/FaceDeer/name_generator",
  "score": 153.5,
  "screenshots": ["https://content.luanti.org/uploads/42cf4959a8.png"],
  "short_description": "A lua library for generating random names based off of rulesets and syllable lists.",
  "state": "APPROVED",
  "tags": ["library"],
  "thumbnail": "https://content.luanti.org/thumbnails/1/42cf4959a8.png",
  "title": "Name Generator",
  "translation_url": null,
  "type": "mod",
  "url": "https://content.luanti.org/packages/FaceDeer/name_generator/releases/5566/download/",
  "video_thumbnail_url": null,
  "video_url": null,
  "website": null,
  "dependencies": {
    "FaceDeer/name_generator": []
  },
  "hash": "1q92ypk07nkm0gfw2p9sdnvhlqajw014bwnykpbz5qmabpk2f1sg"
}
