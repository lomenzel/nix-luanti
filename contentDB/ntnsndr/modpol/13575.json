{
  "author": "ntnsndr",
  "content_warnings": [],
  "created_at": "2021-12-21T22:43:35.964435",
  "dev_state": "WIP",
  "donate_url": null,
  "downloads": 702,
  "forum_url": "https://forum.luanti.org/viewtopic.php?t=27598",
  "forums": 27598,
  "game_support": [],
  "issue_tracker": "https://gitlab.com/medlabboulder/modpol/-/issues",
  "license": "MIT",
  "long_description": "# Modpol for Minetest\n\nModpol, short for \"modular politics,\" is an extension that enables diverse governance processes on multi-user platforms. It offers a library that enables users to create or adapt their own modules that add specific governance functionalities. \n\nThis implementation is a mod for [Minetest](https://minetest.net), a free/open-source voxel game. It is designed to be easily adapted to other multi-user platforms that also employ Lua as an extension language.\n\n## How to use it\n\nModpol is built around groups called *orgs*. At the base is an org with all users in it, called `Root` by default.\n\n*Modules* enable people to do things within orgs, such as decide on membership, grant powers to the org, and much more. Modules can be added and modified by users to meet their needs. Modules can also be nested in each other, so one module can rely on another module to accomplish a process. Within an org, choose the module that you want to use.\n\nModules might simply carry out actions in the game, or they might require a group decision to do so. They might also change the modules available to users of a given org. There are currently two ways of doing this:\n\n* Remove modules from the list of modules loaded in `modpol_core/api.lua` and `modpol_minetest/api.lua`. This will make those modules no longer available to any user.\n* Remove modules for a given org from within the program using the `Change modules` module. The removed modules can be re-added in any org by using `Change modules` again.\n\nThe point is that Modpol should give you the ability to do whatever kind of politics you want with your modules. If there is something you would like to do that is not available, develop a module for it (or ask us for help!).\n\n\n## Installation in Minetest\n\nTo use this in Minetest, simply install it in your `mods/` or `worldmods/` folder. Minetest will load `init.lua`.\n\nIn the game, open the Modpol dashboard with the command `/mp`.\n\nFor testing purposes, players with the `privs` privilege (generally admins) can use the `/mp` command, which resets all the orgs and opens a dashboard.\\\n\n\n## Standalone Version on the Command Line\n\nModpol can also be used independently of Minetest as a command-line tool. Currently command-line use of modpol requires a Unix-style system, but it is intended to become more fully platform independent.\n\nThe command-line version is in the `modpol` subdirectory. To run the program on Unix systems in CLI mode, install lua or luajit and execute the following in this directory:\n\n```\n$ lua[jit] login.lua\n```\n\nYou can also interact with the interpreter by starting it this way:\n\n```\n$ lua[jit]\n> dofile(\"login.lua\")\n```\n\nIn the interpreter, for a list of global functions and tables, use `modpol.menu()`.\n\n## Storage\n\nBy default, a  data  directory  named  \"data\" will  be created in  this directory. `/data` will contain a log file and serialized program data files.\n\nAnother storage method may be chosen in `modpol.lua`. A StorageRef-based method for Minetest 5.* is included: `storage-mod_storage.lua`.\n\n## Design philosophy\n\nModpol seeks to implement a theoretical framework, also called \"[modular politics](https://metagov.org/modpol),\" which proposes these design goals:\n\n* *Modularity*: Platform operators and community members should have the ability to construct systems by creating, importing, and arranging composable parts together as a coherent whole.\n* *Expressiveness*: The governance layer should be able to implement as wide a range of processes as possible.\n* *Portability*: Governance tools developed for one platform should be portable to another platform for reuse and adaptation.\n* *Interoperability*: Governance systems operating on different platforms and protocols should have the ability to interact with each other, sharing data and influencing each other's processes.\n\nAdditionally, Modpol seeks to counteract the tendency for \"[implicit feudalism](https://ntnsndr.in/ImplicitFeudalism),\" according to which rigid, top-down power structures are the norm in online spaces. To this end, some design patterns include:\n\n* *Groups, not roles*: While most platforms assign powers through particular permissions given to individuals, in Modpol, power lies in groups (which Modpol calls \"orgs\").\n* *Consent, not oligarchy*: Rather than assuming that decisions will be made by a few power-holders, the software assumes that consent by all affected users is the norm.\n* *Inheritance, not blank slates*: When a new group is formed, it inherits the patterns of what preceded it, rather than imagining that it is starting from scratch.\n\nIt is certainly possible to use Modpol to replicate practices of implicit feudalism, such as all-powerful admins, but doing so requires extra work to overcome these defaults.\n\n\n## Credits\n\nThis project is led by [Nathan Schneider](https://nathanschneider.info) of the [Media Enterprise Design Lab](https://colorado.edu/lab/medlab) at the University of Colorado Boulder, as part of the [Metagovernance Project](https://metagov.org).\n\nContributors include:\n\n* [Luke Miller](https://gitlab.com/lukvmil) (co-leadership, main control flow, object orientation, module spec)\n* [MisterE](https://gitlab.com/gbrrudmin) (early project refactoring, core feature development)\n* Robert Kiraly [[OldCoder](https://github.com/oldcoder/)] (ocutils.lua, storage-local.lua, project refactoring)\n* Skylar Hew (documentation)\n\nWe are grateful for initial support for this project from a residency with [The Bentway Conservancy](https://www.thebentway.ca/). Read about us in _[The Field Guide to Digital and/as Public Space](https://www.thebentway.ca/stories/field-guide/)_.\n\n\n## Contributing\n\nWe'd love to welcome more contributors. Please join the conversation in the [Issues](https://gitlab.com/medlabboulder/modpol/-/issues), our [Matrix.org channel](https://matrix.to/#/#minetest-modpol:matrix.org), and the [Minetest.net forum](https://forum.minetest.net/viewtopic.php?f=47&t=26037).\n\nLearn more about the project and how to develop your own modules in [the wiki](https://gitlab.com/medlabboulder/modpol/-/wikis/home).\n\n\n## Licenses\n\n* [Project](LICENSE.mt): MIT\n* [Lua Serpent Serializer](serpent/LICENSE.txt): MIT",
  "maintainers": ["ntnsndr"],
  "media_license": "MIT",
  "name": "modpol",
  "provides": ["modpol"],
  "release": 13575,
  "repo": "https://gitlab.com/medlabboulder/modpol",
  "score": 2.4,
  "screenshots": ["https://content.luanti.org/uploads/bd598a1af4.png"],
  "short_description": "Framework that enables diverse governance processes",
  "state": "APPROVED",
  "tags": ["gui", "multiplayer", "server_tools", "world_tools"],
  "thumbnail": "https://content.luanti.org/thumbnails/1/bd598a1af4.png",
  "title": "Modpol",
  "translation_url": null,
  "type": "mod",
  "url": "https://content.luanti.org/packages/ntnsndr/modpol/releases/13575/download/",
  "video_thumbnail_url": null,
  "video_url": null,
  "website": "https://modpol.net/",
  "dependencies": {
    "ntnsndr/modpol": []
  },
  "hash": "0kf7cfsbbpayhmcvg5xxggq6flxhpv478874l7vh8x7nb7nsv90n"
}
