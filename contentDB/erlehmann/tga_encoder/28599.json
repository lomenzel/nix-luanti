{
  "author": "erlehmann",
  "content_warnings": [],
  "created_at": "2022-05-16T20:38:46.286936",
  "dev_state": "ACTIVELY_DEVELOPED",
  "donate_url": null,
  "downloads": 4001,
  "forum_url": null,
  "forums": null,
  "game_support": [],
  "issue_tracker": "https://git.minetest.land/erle/tga_encoder/issues",
  "license": "GPL-3.0-or-later",
  "long_description": "# tga_encoder\nA TGA Encoder written in Lua without the use of external Libraries.\n\nCreated by fleckenstein for MineClone2, then improved by erle.\n\nMay be used as a Minetest mod.\n\nSee `examples.lua` for example code and usage hints.\n\n## Use Cases for `tga_encoder`\n\n### Encoding Textures for Editing\n\nTGA images of types 1/2/3 consist of header data followed by a pixel array.\n\nThis makes it trivial to parse TGA files – and even edit pixels in-place.\n\nNo checksums need to be updated on any kind of in-place texture editing.\n\n**Tip**: When storing an editable image in item meta, use zlib compression.\n\n### Legacy Minetest Texture Encoding\n\nMinetest 5.4 did not include `minetest.encode_png()` (or any equvivalent).\n\nSince `tga_encoder` is written in pure Lua, it does not need engine support.\n\n**Tip:** Look at `examples.lua` and the Minetest mod `mcl_maps` for guidance.\n\n### Advanced Texture Format Control\n\nThe function `minetest.encode_png()` always encodes images as 32bpp RGBA.\n\n`tga_encoder` allows saving images as grayscale, 16bpp RGBA and 24bpp RGB.\n\nFor generating maps from terrain, color-mapped formats can be more useful.\n\n### Encoding Very Small Textures\n\nImages of size 8×8 or below are often smaller than an equivalent PNG file.\n\nNote that on many filesystems files use at least 4096 bytes (i.e. 64×64).\n\nTherefore, saving bytes on files up to a few 100 bytes is often useless.\n\n### Encoding Reference Textures\n\nTGA is a simple format, which makes it easy to create reference textures.\n\nUsing a hex editor, one can trivially see how all the pixels are stored.\n\n## Supported Image Types\n\nFor all types, images are encoded in a fast single pass (i.e. append-only).\n\n### Color-Mapped Images (Type 1)\n\nThese images contain a palette, followed by pixel data.\n\n* `A1R5G5B5` (8bpp RGB)\n* `B8G8R8` (8bpp RGB)\n\n### True-Color Images (Type 2)\n\nThese images contain uncompressed RGB(A) pixel data.\n\n* `A1R5G5B5` (16bpp RGBA)\n* `B8G8R8` (24bpp RGB)\n* `B8G8R8A8` (32bpp RGBA)\n\n### Grayscale Images (Type 3)\n\n* `Y8` (8bpp grayscale)\n\n### Run-Length Encoded (RLE), True-Color Images (Type 10)\n\nThese images contain compressed RGB(A) pixel data.\n\n* `A1R5G5B5` (16bpp RGBA)\n* `B8G8R8` (24bpp RGB)\n* `B8G8R8A8` (32bpp RGBA)\n\n## TODO\n\n* Actually support `R8G8B8A8` input for `A1R5G5B5` output\n* Add both zoomable and explorable maps to `mcl_maps`.\n",
  "maintainers": [
    "erlehmann"
  ],
  "media_license": "GPL-3.0-or-later",
  "name": "tga_encoder",
  "provides": [
    "tga_encoder"
  ],
  "release": 28599,
  "repo": "https://git.minetest.land/erle/tga_encoder",
  "score": 81.2,
  "screenshots": [
    "https://content.luanti.org/uploads/a6cceea59e.png"
  ],
  "short_description": "A TGA Encoder written in Lua without the use of external Libraries.",
  "state": "APPROVED",
  "tags": [
    "library"
  ],
  "thumbnail": "https://content.luanti.org/thumbnails/1/a6cceea59e.png",
  "title": "TGA Encoder",
  "translation_url": null,
  "type": "mod",
  "url": "https://content.luanti.org/packages/erlehmann/tga_encoder/releases/28599/download/",
  "video_thumbnail_url": null,
  "video_url": null,
  "website": null,
  "dependencies": {
    "erlehmann/tga_encoder": []
  },
  "hash": "1qbfzlwsipankibqajs77413w1azh1x65810smx5s1912xcxml66"
}
