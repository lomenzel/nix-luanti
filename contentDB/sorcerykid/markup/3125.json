{"author":"sorcerykid","content_warnings":[],"created_at":"2020-03-04T16:19:52.945836","dev_state":null,"donate_url":"https://liberapay.com/sorcerykid","downloads":1584,"forum_url":"https://forum.luanti.org/viewtopic.php?t=23855","forums":23855,"game_support":[{"confidence":1,"game":{"author":"1248","name":"regnum","release":28584,"short_description":"Fight monsters, collect XP, craft battleaxes, armor, guns and lots more.","thumbnail":"https://content.luanti.org/thumbnails/1/3EqCRnJzzv.png","title":"Regnum","type":"game"},"supports":true},{"confidence":1,"game":{"author":"1248","name":"regnum2","release":28585,"short_description":"This is the second part of Regnum","thumbnail":"https://content.luanti.org/thumbnails/1/Hmlddw7prL.png","title":"Regnum 2","type":"game"},"supports":true}],"issue_tracker":"https://github.com/sorcerykid/markup/issues","license":"MIT","long_description":"*Bedrock Markup Language* is an extensible markup language and API specifically tailored for Minetest formspecs with simple-to-use tags for layout and formatting (e.g. colors, headers, borders, rows and columns), builtin word-wrapping, and support for embedded images (e.g. skins, items, etc.) It is backwards compatible with versions of Minetest 0.4.14+ and has no dependencies other than Simple Skins.\n\nIt makes a particularly nice drop-in replacement for the default sign and book editors, if you want to give your users the ability to create nicer looking messages, rather than accepting raw formspec strings which could pose security risks.\n\nThere is support for 15 text colors (including white) via the following inline tags:\n\n* `[q=gray][/q]` - gray text\n* `[q=red][/q]` - red text\n* `[q=green][/q]` - green text\n* `[q=blue][/q]` - blue text\n* `[q=cyan][/q]` - cyan text\n* `[q=magenta][/q]` - magenta text\n* `[q=yellow][/q]` - yellow text\n* `[q=black][/q]` - black text\n* `[q=brown][/q]` - brown text\n* `[q=teal][/q]` - teal text\n* `[q=purple][/q]` - purple text\n* `[q=olive][/q]` - olive text\n* `[q=indigo][/q]` - indigo text\n* `[q=maroon][/q]` - maroon text\n\nThere is also support for rows and columns via the [r] and [c] tags. These two tags accept an optional numeric attribute to alter the size of the cell to be rendered.\n\nYou can set the depth of all cells on the next row using [r=#], and you can set the width of the next cell using [c=#]. In both cases, # must be an number (or 0 for the default). The unit of measurement is an approximation of the standard \"em\" used in typography.\n\n**Example:** Here is a basic table consisting of two rows and two columns:\n\n```\nUpper left cell[c]Upper right cell\n[r]\nLower left cell[c]Lower right cell\n```\n\nNotice, how the initial [r] tag is missing, and the initial [c] tags are also missing. Not to worry! The lexer automatically fills in these tags behind the scenes. It is entirely optional to include them. This markup is more verbose, but produces the same results:\n\n```\n[r=0][c=0]Upper left cell[c=0]Upper right cell\n[r=0][c=0]Lower left cell[c=0]Lower right cell\n```\n\nBy default rows and cells are evenly spaced vertically and/or horizontally, for the most pleasing appearance. The lexer is capable of automatically resizing rows and cells to fit within the allowed dimensions of the formspec and to prevent overruns.\n\nIn addition to all the features described above, you can easily add bordered text, headline text, and even images (both skin and item textures) into your formspecs!\n\nThe [b] an [h] tags are row-based and accept a depth whereas the [i] an [s] tags are column-based and accept a width:\n\n* `[b]<border_text>` - insert the border text with a depth of 1.0\n* `[b=#]<border_text>` - same as above, but with the specified depth\n* `[h]<header_text>` - insert the header text with a depth of 1.0\n* `[h=#]<header_text>` - same as above, but with the specified depth\n* `[i]<item_name>` - insert the item texture with a width of 2.0 (if the image is too large to fit on the current row, then it will be shrunk to fit).\n* `[i=#]<item_name>` - same as above, but with the specified width\n* `[s]<skin_name>` - insert the skin texture with a width of 2.0 (if the image is too large to fit on the current row, then it will be shrunk to fit).\n* `[s=#]<skin_name>` - same as above, but with the specified width\n\nIt is also possible to include dynamic text using variable interpolation:\n\n* `$name` - the name of the current player\n* `$item` - the wielded item of the current player (for use with the [­i] tag)\n* `$skin` - the selected skin of the current player (for use with the [­s] tag)\n* `$date` - the current world date\n* `$time` - the current world time\n* `$cur_users` - the current number of online players\n* `$max_users` - the maximum number of online players\n\nA variety of special and reserved characters can be inserted by means of escape codes:\n\n* `&amp;` - ampersand\n* `&gt;` - greater-than\n* `&lt;` - less-than\n* `&rb;` - right bracket\n* `&lb;` - left bracket\n* `&copy;` - copyright\n* `&sect;` - section\n* `&half;` - one-half\n* `&deg;` - degree\n* `&pm;` - plus-or-minus\n* `&div;` - division\n* `&mul;` - multiplication\n* `&dash;` - em-dash\n* `&bull;` - bullet\n* `&lq;` - opening quote\n* `&rq;` - closing quote\n* `&lsq;` - opening single-quote\n* `&rsq;` - closing single-quote\n\nThe Bedrock Markup Language also supports emojis! It's simple and easy to embed smilies and other symbols into your formspecs using the existing item tag. Just type one of the following emoji shortnames preceded by a colon, such as `[i]:cupid_heart` or `[i]:smitten`.\n\n* happy\n* silly\n* annoyed\n* mad\n* heart\n* hungry\n* amused\n* disappointed\n* cool\n* cupid_heart\n* smug\n* confused\n* angry\n* cheerful\n* black_heart\n* frustrated\n* surprised\n* sad\n* smitten\n* frozen_heart\n* laughing\n* kissing\n* crying\n* sleeping\n* heartbreak\n* warning\n* danger\n* keep_out\n* cone\n* lock\n\nThe blank psuedo-emoji can be be useful in situations where you need to insert an empty cell for horizontal padding: `[i=2.5]:blank`\n\n**Example:** This is a simple Valentine's Day greeting with a large red balloon from my fireworks mod:\n\n```\n[r=2][i=1]:blank\n[i]:heart[c=7]Here is a BIG red balloon for your extra special Valentine![i]:heart\n[r][c=3][i=9]fireworks:balloon_red\n```\n\nThe following functions are available as part of the Bedrock Markup Language API:\n\n**markup.get_builtin_vars( player_name )**  \nReturn a table consisting of builtin variables for use by the parser. You can add or remove builtin variables or even disable them entirely simply by editing this function.\n\n* *player_name* is the player for whom the formspec string will be generated.\n\n**markup.parse_message( message, vars, defs )**  \nParse the given message and return the rows as a table.\n\n* *message* is the message consisting of Bedrock Markup Language.\n* *vars* is a table of variables, with each key being the variable name and each value being the corresponding string value of the variable.\n* *defs* is a table of emoji, color, and/or symbol definitions, for overriding the default registrations (optional).\n\n**markup.get_formspec_string( rows, min_horz, min_vert, max_horz, max_vert, border_color, header_color, normal_color )**  \nGenerate a formspec string from the rows table returned by markup.parse_message( ).\nrows is the rows table returned by the message parser\n\n* *min_horz* is the left position of the rendering area in formspec coordinates\n* *min_vert* is the bottom position of the rendering area in formspec coordinates\n* *max_horz* is the right position of the rendering area in formspec coordinates\n* *max_vert* is the bottom position of the rendering area in formspec coordinates\n* *border_color* is the hex color code to apply to border boxes (optional)\n* *header_color* is the hex color code to apply to header rules (optional)\n* *normal_color* is the hex color code to apply to normal text (optional)\n\nNote that the parser will skip unknown tags and undefined variables and symbols, rather than stripping them from the original message.","maintainers":["sorcerykid"],"media_license":"CC-BY-SA-3.0","name":"markup","provides":["markup"],"release":3125,"repo":"https://bitbucket.org/sorcerykid/markup","score":2.6,"screenshots":["https://content.luanti.org/uploads/Q3g6xGwXKT.png","https://content.luanti.org/uploads/WZlK4uGxfy.png","https://content.luanti.org/uploads/alCjhLMdeP.png"],"short_description":"Bedrock Markup Language is an extensible markup language and API for formspecs.","state":"APPROVED","tags":["gui","library"],"thumbnail":"https://content.luanti.org/thumbnails/1/Q3g6xGwXKT.png","title":"Bedrock Markup Language","translation_url":null,"type":"mod","url":"https://content.luanti.org/packages/sorcerykid/markup/releases/3125/download/","video_thumbnail_url":null,"video_url":null,"website":null,"dependencies":{"sorcerykid/markup":[{"is_optional":false,"name":"default","packages":["AiTechEye/xaenvironment","Hi_World/newplanet","Noodlemire/voxeldungeon","JALdMIC/survivethedays","sunnysideup/holidayhorrors","BuckarooBanzay/mesecons_lab","nam/porko","Amaz/lordofthetest","1248/castrum","Thunder1035/etb","1248/regnum","Minetest/minetest_game","debiankaios/proxima_survival","carlos_rupp/berzerkpt","1248/regnum2","miroptics/qiskitblocks_miro","KareaGhandTrail/block_assault_mapmaker","KareaGhandTrail/block_assault","Casimir/voxelgarden","bell07/whynot_game","JavaFXpert/qiskitblocks","Kimapr/nonsensical_skyblock","jgordon510/gridlocks","giga-turbo/codecube","niwla23/runorfall","Thunder1035/pacman","Big_Caballito/no_mans_land","MeseCraft/mesecraft","hilol/epic_combat","TheFanne/raining_nodes","rlars/occupymoon_game","PetiAPocok/minetest_extended","mooD_Slayer/ksurvive","EmptyStar/asuna","mt-mods/dreambuilder_game","rubenwardy/capturetheflag"]},{"is_optional":false,"name":"skins","packages":["1248/regnum","1248/regnum2"]}]},"hash":"0ihcps363468qmpqrvg83d1w3s2vhn1vfmr80p9hx0qw9gxyshpl"}