{
  "author": "sorcerykid",
  "content_warnings": [],
  "created_at": "2020-09-04T23:15:48.364024",
  "dev_state": null,
  "donate_url": "https://liberapay.com/sorcerykid",
  "downloads": 995,
  "forum_url": "https://forum.luanti.org/viewtopic.php?t=24283",
  "forums": 24283,
  "game_support": [],
  "issue_tracker": null,
  "license": "MIT",
  "long_description": "Job Control offers a more flexible alternative to the builtin minetest.after function.\n\n * Jobs can be cancelled, extended, or restarted via object-specific methods.\n * Jobs can be repeated at a constant interval when the callback returns true.\n * The elapsed, remaining, and overrun time of jobs can be readily calculated.\n \nThere are two ways to install Job Control: either as a typical mod within the directory\nstructure of your game or by replacing the file 'builtin/common/after.lua' (be sure to\ncreate a backup of the original file). The latter has the advantage that it eliminates\nthe small degree of overhead from an extraneous globalstep running in the background.\n\nA job can be scheduled in the typical fashion, thus ensuring backward compatibility:\n\n * **minetest.after( wait, func, ... )**  \n   Executes the callback after a timeout with optional parameters. The newly constructed \n   Job object is returned.\n\nEach job object has access to the following methods and properties:\n\n * **Job::wait**  \n   The timeout passed to the constructor. This property is immutable.\n\n * **Job::expiry**  \n   The expiration timestamp of the job. This property is immutable.\n\n * **Job::origin**  \n   The name of the mod that created the job. This property is immutable.\n   \n * **Job::cancel( )**  \n   Removes the job from the pending job queue. The callback will no longer be executed.\n\n * **Job::extend( new_wait )**  \n   Reschedules the job with an additional timeout, beyond the expiration timestamp.\n\n * **Job::restart( wait )**  \n   Reschedules the job with a different timeout.\n\n * **Job::get_remain( )**  \n   Returns the remaining time period of the job. From this, it is possible to calculate \n   the elapsed and overrun time periods as well.\n\nAs mentioned earlier, it is also possible to cycle a job simply by returning true in the \ncallback. This can be useful for tasks that must be performed at regular intervals, such \nas writing data files to disk. Bear in mind, however, that this isn't a replacement for\nan actual synchronized timer since the callback execution itself can incur a marginal \ndelay during each iteration.",
  "maintainers": [
    "sorcerykid"
  ],
  "media_license": "MIT",
  "name": "cronjob",
  "provides": [
    "cronjob"
  ],
  "release": 4996,
  "repo": "https://bitbucket.org/sorcerykid/cronjob",
  "score": 3.3,
  "screenshots": [
    "https://content.luanti.org/uploads/XiLEmgo7nJ.png"
  ],
  "short_description": "A more flexible alternative to the builtin minetest.after function",
  "state": "APPROVED",
  "tags": [
    "library"
  ],
  "thumbnail": "https://content.luanti.org/thumbnails/1/XiLEmgo7nJ.png",
  "title": "Job Control Mod",
  "translation_url": null,
  "type": "mod",
  "url": "https://content.luanti.org/packages/sorcerykid/cronjob/releases/4996/download/",
  "video_thumbnail_url": null,
  "video_url": null,
  "website": null,
  "dependencies": {
    "sorcerykid/cronjob": []
  },
  "hash": "1sspn647wzp168my75pfp8jb2mwq92d913hk0vsmvd315nykqk12"
}
